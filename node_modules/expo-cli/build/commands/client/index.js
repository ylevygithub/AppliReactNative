'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _toConsumableArray2;

function _load_toConsumableArray() {
  return _toConsumableArray2 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));
}

var _extends2;

function _load_extends() {
  return _extends2 = _interopRequireDefault(require('babel-runtime/helpers/extends'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _cliTable;

function _load_cliTable() {
  return _cliTable = _interopRequireDefault(require('cli-table'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('xdl');
}

var _urlOpts;

function _load_urlOpts() {
  return _urlOpts = _interopRequireDefault(require('../../urlOpts'));
}

var _appleApi;

function _load_appleApi() {
  return _appleApi = _interopRequireWildcard(require('../build/ios/appleApi'));
}

var _fastlane;

function _load_fastlane() {
  return _fastlane = require('../build/ios/appleApi/fastlane');
}

var _selectDistributionCert;

function _load_selectDistributionCert() {
  return _selectDistributionCert = _interopRequireDefault(require('./selectDistributionCert'));
}

var _selectPushKey;

function _load_selectPushKey() {
  return _selectPushKey = _interopRequireDefault(require('./selectPushKey'));
}

var _generateBundleIdentifier;

function _load_generateBundleIdentifier() {
  return _generateBundleIdentifier = _interopRequireDefault(require('./generateBundleIdentifier'));
}

var _clientBuildApi;

function _load_clientBuildApi() {
  return _clientBuildApi = require('./clientBuildApi');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

var _prompt;

function _load_prompt() {
  return _prompt = _interopRequireDefault(require('../../prompt'));
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (program) {
  program.command('client:ios').option('--apple-id <login>', 'Apple ID username (please also set the Apple ID password as EXPO_APPLE_PASSWORD environment variable).').description('Build a custom version of the Expo Client for iOS using your own Apple credentials and install it on your mobile device using Safari.').asyncAction(function () {
    var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(options) {
      var authData, user, bundleIdentifier, experienceName, context, distributionCert, pushKey, email, _ref2, _ref3, devices, udids, addUdid, table, udidPrompt, result;

      return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (_appleApi || _load_appleApi()).authenticate(options);

            case 2:
              authData = _context.sent;
              _context.next = 5;
              return (_xdl || _load_xdl()).User.getCurrentUserAsync();

            case 5:
              user = _context.sent;
              bundleIdentifier = (0, (_generateBundleIdentifier || _load_generateBundleIdentifier()).default)(authData.team.id);
              _context.next = 9;
              return (0, (_clientBuildApi || _load_clientBuildApi()).getExperienceName)({ user: user, appleTeamId: authData.team.id });

            case 9:
              experienceName = _context.sent;
              context = (0, (_extends2 || _load_extends()).default)({}, authData, {
                bundleIdentifier: bundleIdentifier,
                experienceName: experienceName,
                username: user ? user.username : null
              });
              _context.next = 13;
              return (_appleApi || _load_appleApi()).ensureAppExists(context);

            case 13:
              _context.next = 15;
              return (0, (_selectDistributionCert || _load_selectDistributionCert()).default)(context);

            case 15:
              distributionCert = _context.sent;
              _context.next = 18;
              return (0, (_selectPushKey || _load_selectPushKey()).default)(context);

            case 18:
              pushKey = _context.sent;
              email = void 0;

              if (!user) {
                _context.next = 24;
                break;
              }

              email = user.email;
              _context.next = 28;
              break;

            case 24:
              _context.next = 26;
              return (0, (_prompt || _load_prompt()).default)({
                name: 'email',
                message: 'Please enter an email address to notify, when the build is completed:',
                filter: function filter(value) {
                  return value.trim();
                },
                validate: function validate(value) {
                  return (/.+@.+/.test(value) ? true : "That doesn't look like a valid email."
                  );
                }
              });

            case 26:
              _ref2 = _context.sent;
              email = _ref2.email;

            case 28:
              _context.next = 30;
              return (0, (_fastlane || _load_fastlane()).runAction)((_fastlane || _load_fastlane()).travelingFastlane.listDevices, [context.appleId, context.appleIdPassword, context.team.id]);

            case 30:
              _ref3 = _context.sent;
              devices = _ref3.devices;
              udids = devices.map(function (device) {
                return device.deviceNumber;
              });

              (_log || _load_log()).default.newLine();

              addUdid = void 0;

              if (!(udids.length === 0)) {
                _context.next = 40;
                break;
              }

              (0, (_log || _load_log()).default)('There are no devices registered to your Apple Developer account. Please follow the instructions below to register an iOS device.');
              addUdid = true;
              _context.next = 49;
              break;

            case 40:
              (0, (_log || _load_log()).default)('Custom builds of the Expo Client can only be installed on devices which have been registered with Apple at build-time.');
              (0, (_log || _load_log()).default)('These devices are currently registered on your Apple Developer account:');
              table = new (_cliTable || _load_cliTable()).default({ head: ['Name', 'Identifier'], style: { head: ['cyan'] } });

              table.push.apply(table, (0, (_toConsumableArray2 || _load_toConsumableArray()).default)(devices.map(function (device) {
                return [device.name, device.deviceNumber];
              })));
              (0, (_log || _load_log()).default)(table.toString());

              _context.next = 47;
              return (0, (_prompt || _load_prompt()).default)({
                name: 'addUdid',
                message: 'Would you like to register new devices to use the Expo Client with?',
                type: 'confirm',
                default: true
              });

            case 47:
              udidPrompt = _context.sent;

              addUdid = udidPrompt.addUdid;

            case 49:
              _context.next = 51;
              return (0, (_clientBuildApi || _load_clientBuildApi()).createClientBuildRequest)({
                user: user,
                context: context,
                distributionCert: distributionCert,
                pushKey: pushKey,
                udids: udids,
                addUdid: addUdid,
                email: email
              });

            case 51:
              result = _context.sent;


              (_log || _load_log()).default.newLine();
              if (addUdid) {
                (_urlOpts || _load_urlOpts()).default.printQRCode(result.registrationUrl);
                (0, (_log || _load_log()).default)('Open the following link on your iOS device (or scan the QR code) and follow the instructions to install the development profile:');
                (_log || _load_log()).default.newLine();
                (0, (_log || _load_log()).default)((_chalk || _load_chalk()).default.green('' + result.registrationUrl));
                (_log || _load_log()).default.newLine();
                (0, (_log || _load_log()).default)("After you register your device, we'll start building your client, and you'll receive an email when it's ready to install.");
              } else {
                (_urlOpts || _load_urlOpts()).default.printQRCode(result.statusUrl);
                (0, (_log || _load_log()).default)('Your custom Expo Client is being built! ðŸ› ');
                (0, (_log || _load_log()).default)('Open this link on your iOS device (or scan the QR code) to view build logs and install the client:');
                (_log || _load_log()).default.newLine();
                (0, (_log || _load_log()).default)((_chalk || _load_chalk()).default.green('' + result.statusUrl));
              }
              (_log || _load_log()).default.newLine();

            case 55:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
};

module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/client/index.js.map
