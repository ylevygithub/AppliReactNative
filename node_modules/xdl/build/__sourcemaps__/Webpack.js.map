{"version":3,"sources":["Webpack.js"],"names":["async","await","choosePort","HOST","DEFAULT_PORT","error","ErrorCode","NO_PORT_FOUND","message","choosePortAsync","projectRoot","nonInteractive","verbose","Doctor","validateWebSupportAsync","webpackDevServerInstance","ProjectUtils","logError","WEBPACK_LOG_TAG","useYarn","ConfigUtils","isUsingYarn","exp","readConfigJsonAsync","webName","getNameFromConfig","let","dev","https","ProjectSettings","readAsync","mode","config","Web","invokeWebpackConfig","pwa","development","production","webpackServerPort","logInfo","chalk","underline","protocol","urls","prepareUrls","Promise","resolve","compiler","createWebpackCompiler","webpack","appName","onFinished","devServer","listen","setPackagerInfoAsync","server","url","getUrlAsync","startAsync","getServer","host","ip","address","urlType","getProtocolAsync","close","stopAsync","packagerOpts","process","env","BABEL_ENV","NODE_ENV","polyfill","reject","run","stats","bundleAsync","options","openProjectAsync","openAsync"],"mappings":"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","file":"../Webpack.js","sourcesContent":["/**\n * @flow\n */\nimport * as ConfigUtils from '@expo/config';\nimport { choosePort, prepareUrls } from 'react-dev-utils/WebpackDevServerUtils';\nimport webpack from 'webpack';\nimport WebpackDevServer from 'webpack-dev-server';\nimport chalk from 'chalk';\nimport createWebpackCompiler from './createWebpackCompiler';\nimport ErrorCode from './ErrorCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as Web from './Web';\nimport * as Doctor from './project/Doctor';\nimport XDLError from './XDLError';\nimport ip from './ip';\n\nimport type { User as ExpUser } from './User'; //eslint-disable-line\n\nconst HOST = '0.0.0.0';\nconst DEFAULT_PORT = 19006;\nconst WEBPACK_LOG_TAG = 'expo';\n\nlet webpackDevServerInstance: WebpackDevServer | null = null;\nlet webpackServerPort: number | null = null;\n\nexport function getServer(projectRoot: string) {\n  if (webpackDevServerInstance == null) {\n    ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, 'Webpack is not running.');\n  }\n  return webpackDevServerInstance;\n}\n\nasync function choosePortAsync(): Promise<number | null> {\n  try {\n    return await choosePort(HOST, DEFAULT_PORT);\n  } catch (error) {\n    throw new XDLError(ErrorCode.NO_PORT_FOUND, 'No available port found: ' + error.message);\n  }\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  { nonInteractive }: Object,\n  verbose: boolean\n): Promise<{ url: string, server: WebpackDevServer }> {\n  await Doctor.validateWebSupportAsync(projectRoot);\n\n  if (webpackDevServerInstance) {\n    ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, 'Webpack is already running.');\n    return;\n  }\n\n  const useYarn = ConfigUtils.isUsingYarn(projectRoot);\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  const { webName } = ConfigUtils.getNameFromConfig(exp);\n\n  let { dev, https } = await ProjectSettings.readAsync(projectRoot);\n  const mode = dev ? 'development' : 'production';\n\n  const config = Web.invokeWebpackConfig({\n    projectRoot,\n    pwa: true,\n    development: dev,\n    production: !dev,\n    https,\n  });\n\n  webpackServerPort = await choosePortAsync();\n  ProjectUtils.logInfo(\n    projectRoot,\n    WEBPACK_LOG_TAG,\n    `Starting Webpack on port ${webpackServerPort} in ${chalk.underline(mode)} mode.`\n  );\n\n  const protocol = https ? 'https' : 'http';\n  const urls = prepareUrls(protocol, '::', webpackServerPort);\n\n  await new Promise(resolve => {\n    // Create a webpack compiler that is configured with custom messages.\n    const compiler = createWebpackCompiler({\n      projectRoot,\n      nonInteractive,\n      webpack,\n      appName: webName,\n      config,\n      urls,\n      useYarn,\n      onFinished: resolve,\n    });\n    webpackDevServerInstance = new WebpackDevServer(compiler, config.devServer);\n    // Launch WebpackDevServer.\n    webpackDevServerInstance.listen(webpackServerPort, HOST, error => {\n      if (error) {\n        ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, error);\n      }\n      // clearConsole();\n    });\n  });\n\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    webpackServerPort,\n  });\n\n  return {\n    server: webpackDevServerInstance,\n    url: await getUrlAsync(projectRoot),\n  };\n}\n\nexport async function getUrlAsync(projectRoot: string): Promise<string> {\n  const devServer = getServer(projectRoot);\n  if (!devServer) {\n    return null;\n  }\n  const host = ip.address();\n  const urlType = await getProtocolAsync(projectRoot);\n  return `${urlType}://${host}:${webpackServerPort}`;\n}\n\nexport async function getProtocolAsync(projectRoot: string): Promise<'http' | 'https'> {\n  // TODO: Bacon: Handle when not in expo\n  const { https } = await ProjectSettings.readAsync(projectRoot);\n  if (https === true) {\n    return 'https';\n  }\n  return 'http';\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  if (webpackDevServerInstance) {\n    await new Promise(resolve => webpackDevServerInstance.close(() => resolve()));\n    webpackDevServerInstance = null;\n    webpackServerPort = null;\n    // TODO\n    await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n      webpackServerPort: null,\n    });\n  }\n}\n\nexport async function bundleAsync(projectRoot: string, packagerOpts: Object): Promise<void> {\n  await Doctor.validateWebSupportAsync(projectRoot);\n  const mode = packagerOpts.dev ? 'development' : 'production';\n  process.env.BABEL_ENV = mode;\n  process.env.NODE_ENV = mode;\n\n  let config = Web.invokeWebpackConfig({\n    projectRoot,\n    pwa: packagerOpts.pwa,\n    polyfill: packagerOpts.polyfill,\n    development: packagerOpts.dev,\n    production: !packagerOpts.dev,\n  });\n  let compiler = webpack(config);\n\n  try {\n    // We generate the stats.json file in the webpack-config\n    await new Promise((resolve, reject) =>\n      compiler.run(async (error, stats) => {\n        // TODO: Bacon: account for CI\n        if (error) {\n          // TODO: Bacon: Clean up error messages\n          return reject(error);\n        }\n        resolve(stats);\n      })\n    );\n  } catch (error) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      'There was a problem building your web project. ' + error.message\n    );\n    throw error;\n  }\n}\n\nexport async function openAsync(projectRoot: string, options = {}, verbose = true): Promise<void> {\n  if (!webpackDevServerInstance) {\n    await startAsync(projectRoot, options, verbose);\n  }\n  await Web.openProjectAsync(projectRoot);\n}\n"],"sourceRoot":"/xdl@53.7.2/src"}