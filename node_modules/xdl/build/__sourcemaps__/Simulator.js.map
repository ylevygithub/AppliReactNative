{"version":3,"sources":["Simulator.js"],"names":["async","args","await","spawnAsync","e","_isLicenseOutOfDate","stdout","stderr","ErrorCode","XCODE_LICENSE_NOT_ACCEPTED","Logger","global","error","join","_xcrunAsync","let","result","osascript","execAsync","trim","console","XCODE_NOT_INSTALLED_ERROR","warn","matches","match","length","version","semver","valid","lt","SUGGESTED_XCODE_VERSION","isXDLError","toString","_isSimulatorInstalledAsync","_isSimulatorRunningAsync","info","_waitForSimulatorRunningAsync","_openSimulatorAsync","zeroMeansNo","bootedDevice","_bootedSimulatorDeviceAsync","_bootDefaultSimulatorDeviceAsync","defaultDeviceUDID","_getDefaultSimulatorDeviceUDIDAsync","_getFirstAvailableDeviceAsync","udid","delayAsync","simulatorDeviceInfo","_listSimulatorDevicesAsync","runtime","devices","i","device","isAvailable","name","includes","infoJson","JSON","parse","state","_quitSimulatorAsync","simDir","_dirForSimulatorDevice","glob","cwd","_isExpoAppInstalledOnCurrentBootedSimulatorAsync","_waitForExpoAppInstalledOnCurrentBootedSimulatorAsync","regex","regexMatch","exec","_expoVersionOnCurrentBootedSimulatorAsync","versions","Versions","versionsAsync","installedVersion","iosVersion","notifications","code","NotificationCode","OLD_IOS_APP_VERSION","_checkExpoUpToDateAsync","url","dir","path","_simulatorCacheDirectory","Api","downloadAsync","extract","fs","exists","filesInDir","readdir","rimraf","sync","mkdirpSync","iosUrl","_downloadSimulatorAppAsync","START_LOADING","STOP_LOADING","_installExpoOnSimulatorAsync","message","_uninstallExpoAppFromSimulatorAsync","installResult","status","_lastUrl","upgradeExpoAsync","_openUrlInSimulatorAsync","isDetached","success","msg","Analytics","logEvent","platform","openUrlInSimulatorSafeAsync","projectRoot","projectUrl","UrlUtils","constructManifestUrlAsync","hostType","exp","ProjectUtils","readConfigJsonAsync","openProjectAsync","isPlatformSupported","process","text","lower","toLowerCase","resolve","homeDir","dotExpoHomeDirectory","UserSettings"],"mappings":"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","file":"../Simulator.js","sourcesContent":["/**\n * @flow\n */\n\nimport delayAsync from 'delay-async';\nimport glob from 'glob-promise';\nimport homeDir from 'home-dir';\nimport osascript from '@expo/osascript';\nimport path from 'path';\nimport semver from 'semver';\nimport spawnAsync from '@expo/spawn-async';\nimport rimraf from 'rimraf';\nimport fs from 'fs-extra';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport ErrorCode from './ErrorCode';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\nimport * as UrlUtils from './UrlUtils';\n\nlet _lastUrl = null;\n\nconst SUGGESTED_XCODE_VERSION = `8.2.0`;\nconst XCODE_NOT_INSTALLED_ERROR =\n  'Simulator not installed. Please visit https://developer.apple.com/xcode/download/ to download Xcode and the iOS simulator. If you already have the latest version of Xcode installed, you may have to run the command `sudo xcode-select -s /Applications/Xcode.app`.';\n\nexport function isPlatformSupported() {\n  return process.platform === 'darwin';\n}\n\nfunction _isLicenseOutOfDate(text) {\n  if (!text) {\n    return false;\n  }\n\n  let lower = text.toLowerCase();\n  return lower.includes('xcode') && lower.includes('license');\n}\n\nasync function _xcrunAsync(args) {\n  try {\n    return await spawnAsync('xcrun', args);\n  } catch (e) {\n    if (_isLicenseOutOfDate(e.stdout) || _isLicenseOutOfDate(e.stderr)) {\n      throw new XDLError(\n        ErrorCode.XCODE_LICENSE_NOT_ACCEPTED,\n        'Xcode license is not accepted. Please run `sudo xcodebuild -license`.'\n      );\n    } else {\n      Logger.global.error(`Error running \\`xcrun ${args.join(' ')}\\`: ${e.stderr}`);\n      throw e;\n    }\n  }\n}\n\n// Simulator installed\nexport async function _isSimulatorInstalledAsync() {\n  let result;\n  try {\n    result = (await osascript.execAsync('id of app \"Simulator\"')).trim();\n  } catch (e) {\n    console.error(\n      \"Can't determine id of Simulator app; the Simulator is most likely not installed on this machine\",\n      e\n    );\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n  if (\n    result !== 'com.apple.iphonesimulator' &&\n    result !== 'com.apple.CoreSimulator.SimulatorTrampoline'\n  ) {\n    console.warn(\n      \"Simulator is installed but is identified as '\" + result + \"'; don't know what that is.\"\n    );\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n\n  // check xcode version\n  try {\n    const { stdout } = await spawnAsync('xcodebuild', ['-version']);\n\n    // find something that looks like a dot separated version number\n    let matches = stdout.match(/[\\d]{1,2}\\.[\\d]{1,3}/);\n    if (matches.length === 0) {\n      // very unlikely\n      console.error('No version number found from `xcodebuild -version`.');\n      Logger.global.error(\n        'Unable to check Xcode version. Command ran successfully but no version number was found.'\n      );\n      return false;\n    }\n\n    // we're cheating to use the semver lib, but it expects a proper patch version which xcode doesn't have\n    const version = matches[0] + '.0';\n\n    if (!semver.valid(version)) {\n      console.error('Invalid version number found: ' + matches[0]);\n      return false;\n    }\n\n    if (semver.lt(version, SUGGESTED_XCODE_VERSION)) {\n      console.warn(\n        `Found Xcode ${version}, which is older than the recommended Xcode ${SUGGESTED_XCODE_VERSION}.`\n      );\n    }\n  } catch (e) {\n    // how would this happen? presumably if Simulator id is found then xcodebuild is installed\n    console.error(`Unable to check Xcode version: ${e}`);\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n\n  // make sure we can run simctl\n  try {\n    await _xcrunAsync(['simctl', 'help']);\n  } catch (e) {\n    if (e.isXDLError) {\n      Logger.global.error(e.toString());\n    } else {\n      console.warn(`Unable to run simctl: ${e.toString()}`);\n      Logger.global.error(\n        'xcrun may not be configured correctly. Try running `sudo xcode-select --reset` and running this again.'\n      );\n    }\n    return false;\n  }\n\n  return true;\n}\n\n// Simulator opened\nexport async function _openSimulatorAsync() {\n  if (!(await _isSimulatorRunningAsync())) {\n    Logger.global.info('Opening iOS simulator');\n    await spawnAsync('open', ['-a', 'Simulator']);\n    await _waitForSimulatorRunningAsync();\n  }\n}\n\nexport async function _isSimulatorRunningAsync() {\n  let zeroMeansNo = (await osascript.execAsync(\n    'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n  )).trim();\n  if (zeroMeansNo === '0') {\n    return false;\n  }\n\n  let bootedDevice = await _bootedSimulatorDeviceAsync();\n\n  if (!bootedDevice) {\n    return await _bootDefaultSimulatorDeviceAsync();\n  }\n\n  return !!bootedDevice;\n}\n\nasync function _bootDefaultSimulatorDeviceAsync() {\n  Logger.global.info(`Booting device in iOS simulator...`);\n  try {\n    let defaultDeviceUDID = await _getDefaultSimulatorDeviceUDIDAsync();\n    if (!defaultDeviceUDID) {\n      defaultDeviceUDID = (await _getFirstAvailableDeviceAsync()).udid;\n    }\n    return await _xcrunAsync(['simctl', 'boot', defaultDeviceUDID]);\n  } catch (e) {\n    Logger.global.error(\n      `There was a problem booting a device in iOS Simulator. Quit Simulator, and try again.`\n    );\n    throw e;\n  }\n}\n\nasync function _getDefaultSimulatorDeviceUDIDAsync() {\n  try {\n    const { stdout: defaultDeviceUDID } = await spawnAsync('defaults', [\n      'read',\n      'com.apple.iphonesimulator',\n      'CurrentDeviceUDID',\n    ]);\n    return defaultDeviceUDID.trim();\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function _waitForSimulatorRunningAsync() {\n  if (await _isSimulatorRunningAsync()) {\n    return true;\n  } else {\n    await delayAsync(100);\n    return await _waitForSimulatorRunningAsync();\n  }\n}\n\nasync function _getFirstAvailableDeviceAsync() {\n  let simulatorDeviceInfo = await _listSimulatorDevicesAsync();\n  for (let runtime in simulatorDeviceInfo.devices) {\n    let devices = simulatorDeviceInfo.devices[runtime];\n    for (let i = 0; i < devices.length; i++) {\n      let device = devices[i];\n      if (device.isAvailable && device.name.includes('iPhone')) {\n        return device;\n      }\n    }\n  }\n  Logger.global.warn('No iPhone devices available in Simulator.');\n  return null;\n}\n\nasync function _listSimulatorDevicesAsync() {\n  let infoJson = await _xcrunAsync(['simctl', 'list', 'devices', '--json']);\n  let info = JSON.parse(infoJson.stdout);\n  return info;\n}\n\nasync function _bootedSimulatorDeviceAsync() {\n  let simulatorDeviceInfo = await _listSimulatorDevicesAsync();\n  for (let runtime in simulatorDeviceInfo.devices) {\n    let devices = simulatorDeviceInfo.devices[runtime];\n    for (let i = 0; i < devices.length; i++) {\n      let device = devices[i];\n      if (device.state === 'Booted') {\n        return device;\n      }\n    }\n  }\n  return null;\n}\n\nexport function _dirForSimulatorDevice(udid: string) {\n  return path.resolve(homeDir(), 'Library/Developer/CoreSimulator/Devices', udid);\n}\n\nexport async function _quitSimulatorAsync() {\n  return await osascript.execAsync('tell application \"Simulator\" to quit');\n}\n\n// Expo installed\nexport async function _isExpoAppInstalledOnCurrentBootedSimulatorAsync() {\n  let device = await _bootedSimulatorDeviceAsync();\n  if (!device) {\n    return false;\n  }\n  let simDir = await _dirForSimulatorDevice(device.udid);\n  let matches = await glob(\n    './data/Containers/Data/Application/*/Library/Caches/Snapshots/host.exp.Exponent',\n    { cwd: simDir }\n  );\n\n  return matches.length > 0;\n}\n\nexport async function _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync() {\n  if (await _isExpoAppInstalledOnCurrentBootedSimulatorAsync()) {\n    return true;\n  } else {\n    await delayAsync(100);\n    return await _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync();\n  }\n}\n\nexport async function _expoVersionOnCurrentBootedSimulatorAsync() {\n  let device = await _bootedSimulatorDeviceAsync();\n  if (!device) {\n    return null;\n  }\n  let simDir = await _dirForSimulatorDevice(device.udid);\n  let matches = await glob('./data/Containers/Bundle/Application/*/Exponent-*.app', {\n    cwd: simDir,\n  });\n\n  if (matches.length === 0) {\n    return null;\n  }\n\n  let regex = /Exponent-([0-9.]+)\\.app/;\n  let regexMatch = regex.exec(matches[0]);\n  if (regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nexport async function _checkExpoUpToDateAsync() {\n  let versions = await Versions.versionsAsync();\n  let installedVersion = await _expoVersionOnCurrentBootedSimulatorAsync();\n\n  if (!installedVersion || semver.lt(installedVersion, versions.iosVersion)) {\n    Logger.notifications.warn(\n      { code: NotificationCode.OLD_IOS_APP_VERSION },\n      'This version of the Expo app is out of date. Uninstall the app and run again to upgrade.'\n    );\n  }\n}\n\nexport async function _downloadSimulatorAppAsync(url) {\n  // If specific URL given just always download it and don't use cache\n  if (url) {\n    let dir = path.join(_simulatorCacheDirectory(), `Exponent-tmp.app`);\n    await Api.downloadAsync(url, dir, { extract: true });\n    return dir;\n  }\n\n  let versions = await Versions.versionsAsync();\n  let dir = path.join(_simulatorCacheDirectory(), `Exponent-${versions.iosVersion}.app`);\n\n  if (await fs.exists(dir)) {\n    let filesInDir = await fs.readdir(dir);\n    if (filesInDir.length > 0) {\n      return dir;\n    } else {\n      rimraf.sync(dir);\n    }\n  }\n\n  fs.mkdirpSync(dir);\n  try {\n    await Api.downloadAsync(versions.iosUrl, dir, { extract: true });\n  } catch (e) {\n    rimraf.sync(dir);\n    throw e;\n  }\n\n  return dir;\n}\n\n// url: Optional URL of Exponent.app tarball to download\nexport async function _installExpoOnSimulatorAsync(url) {\n  Logger.global.info(`Downloading the latest version of Expo client app`);\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let dir = await _downloadSimulatorAppAsync(url);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  Logger.global.info('Installing Expo client on iOS simulator');\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let result = await _xcrunAsync(['simctl', 'install', 'booted', dir]);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  return result;\n}\n\nexport async function _uninstallExpoAppFromSimulatorAsync() {\n  try {\n    Logger.global.info('Uninstalling Expo client from iOS simulator.');\n    await _xcrunAsync(['simctl', 'uninstall', 'booted', 'host.exp.Exponent']);\n  } catch (e) {\n    if (e.message && e.message.includes('No devices are booted.')) {\n      return null;\n    } else {\n      console.error(e);\n      throw e;\n    }\n  }\n}\n\nexport function _simulatorCacheDirectory() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let dir = path.join(dotExpoHomeDirectory, 'ios-simulator-app-cache');\n  fs.mkdirpSync(dir);\n  return dir;\n}\n\nexport async function upgradeExpoAsync(): Promise<boolean> {\n  if (!(await _isSimulatorInstalledAsync())) {\n    return false;\n  }\n\n  await _openSimulatorAsync();\n  await _uninstallExpoAppFromSimulatorAsync();\n  let installResult = await _installExpoOnSimulatorAsync();\n  if (installResult.status !== 0) {\n    return false;\n  }\n\n  if (_lastUrl) {\n    Logger.global.info(`Opening ${_lastUrl} in Expo.`);\n    await _xcrunAsync(['simctl', 'openurl', 'booted', _lastUrl]);\n    _lastUrl = null;\n  }\n\n  return true;\n}\n\n// Open Url\nexport async function _openUrlInSimulatorAsync(url: string) {\n  return await _xcrunAsync(['simctl', 'openurl', 'booted', url]);\n}\n\nexport async function openUrlInSimulatorSafeAsync(\n  url: string,\n  isDetached: boolean = false\n): Promise<{ success: true } | { success: false, msg: string }> {\n  if (!(await _isSimulatorInstalledAsync())) {\n    return {\n      success: false,\n      msg: 'Unable to verify Xcode and Simulator installation.',\n    };\n  }\n\n  try {\n    await _openSimulatorAsync();\n\n    if (!isDetached && !(await _isExpoAppInstalledOnCurrentBootedSimulatorAsync())) {\n      await _installExpoOnSimulatorAsync();\n      await _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync();\n    }\n\n    if (!isDetached) {\n      _lastUrl = url;\n      _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    Logger.global.info(`Opening ${url} in iOS simulator`);\n    await _openUrlInSimulatorAsync(url);\n  } catch (e) {\n    if (e.isXDLError) {\n      // Hit some internal error, don't try again.\n      // This includes Xcode license errors\n      Logger.global.error(e.message);\n      return {\n        success: false,\n        msg: `${e.toString()}`,\n      };\n    }\n\n    if (isDetached) {\n      Logger.global.error(\n        `Error running app. Have you installed the app already using Xcode? Since you are detached you must build manually. ${e.toString()}`\n      );\n    } else {\n      Logger.global.error(`Error installing or running app. ${e.toString()}`);\n    }\n\n    return {\n      success: false,\n      msg: `${e.toString()}`,\n    };\n  }\n\n  Analytics.logEvent('Open Url on Device', {\n    platform: 'ios',\n  });\n\n  return {\n    success: true,\n  };\n}\n\nexport async function openProjectAsync(\n  projectRoot: string\n): Promise<{ success: true, url: string } | { success: false, error: string }> {\n  let projectUrl = await UrlUtils.constructManifestUrlAsync(projectRoot, {\n    hostType: 'localhost',\n  });\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let result = await openUrlInSimulatorSafeAsync(projectUrl, !!exp.isDetached);\n  if (result.success) {\n    return { success: true, url: projectUrl };\n  } else {\n    return { success: result.success, error: result.msg };\n  }\n}\n"],"sourceRoot":"/xdl@53.7.2/src"}