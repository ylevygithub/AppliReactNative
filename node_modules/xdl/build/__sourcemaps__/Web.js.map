{"version":3,"sources":["Web.js"],"names":["async","projectRoot","await","Doctor","validateWebSupportAsync","let","url","UrlUtils","constructWebAppUrlAsync","openBrowser","success","e","Logger","global","error","message","openProjectAsync","exp","readConfigJsonAsync","Array","isArray","platforms","length","onlySupportsWebAsync","invokeWebpackConfig","invokePossibleFunction","objectOrMethod","args","env","argv","projectWebpackConfig","path","resolve","fs","existsSync","webpackConfig","require","config"],"mappings":";;;;;;;;+BA6BOA,WAAgCC,WAAhCD,EAA6C;AAClDE,UAAMC,4BAAOC,uBAAPD,CAA+BF,WAA/BE,CAAND;;AAEA,QAAI;AACFG,UAAIC,MAAMJ,MAAMK,gCAASC,uBAATD,CAAiCN,WAAjCM,CAAhBF;AACAI,yDAAYH,GAAZG;AACA,aAAO,EAAEC,SAAS,IAAX,EAAiBJ,GAAjB,EAAP;AACF,KAJA,CAIE,OAAOK,CAAP,EAAU;AACVC,0CAAOC,MAAPD,CAAcE,KAAdF,CAAqB,kCAAiCD,EAAEI,OAAQ,EAAhEH;AACA,aAAO,EAAEF,SAAS,KAAX,EAAkBI,OAAOH,CAAzB,EAAP;AACF;AACF,G;;kBAXsBK,gB;;;;;AAatB;;;;gCACOhB,WAAoCC,WAApCD,EAAiD;AACtD,UAAM,EAAEiB,GAAF,KAAUf,MAAMgB,iEAAoBjB,WAApBiB,CAAtB;AACA,QAAIC,MAAMC,OAAND,CAAcF,IAAII,SAAlBF,KAAgCF,IAAII,SAAJJ,CAAcK,MAAdL,KAAyB,CAA7D,EAAgE;AAC9D,aAAOA,IAAII,SAAJJ,CAAc,CAAdA,MAAqB,KAA5B;AACF;AACA,WAAO,KAAP;AACF,G;;kBANsBM,oB;;;;;QA1BNC,mB,GAAAA,mB;;AAjBhB;;;;AACA;AAAA;AAAA;;AACA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;AAEA,SAASC,sBAAT,CAAgCC,cAAhC,EAAgD,GAAGC,IAAnD,EAAyD;AACvD,MAAI,OAAOD,cAAP,KAA0B,UAA9B,EAA0C;AACxC,WAAOA,eAAe,GAAGC,IAAlBD,CAAP;AACF,GAFA,MAEO;AACL,WAAOA,cAAP;AACF;AACF;;AAEO,SAASF,mBAAT,CAA6BI,GAA7B,EAAkCC,IAAlC,EAAwC;AAC7C;AACA,QAAMC,uBAAuBC,cAAKC,OAALD,CAAaH,IAAI3B,WAAjB8B,EAA8B,mBAA9BA,CAA7B;AACA,MAAIE,YAAGC,UAAHD,CAAcH,oBAAdG,CAAJ,EAAyC;AACvC,UAAME,gBAAgBC,QAAQN,oBAARM,CAAtB;AACA,WAAOX,uBAAuBU,aAAvBV,EAAsCG,GAAtCH,EAA2CI,IAA3CJ,CAAP;AACF;AACA;AACA,QAAMY,SAASD,QAAQ,sBAARA,CAAf;AACA,SAAOC,OAAOT,GAAPS,EAAYR,IAAZQ,CAAP;AACF","file":"../Web.js","sourcesContent":["import fs from 'fs';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport path from 'path';\n\nimport Logger from './Logger';\nimport * as Doctor from './project/Doctor';\nimport { readConfigJsonAsync } from './project/ProjectUtils';\nimport * as UrlUtils from './UrlUtils';\n\nfunction invokePossibleFunction(objectOrMethod, ...args) {\n  if (typeof objectOrMethod === 'function') {\n    return objectOrMethod(...args);\n  } else {\n    return objectOrMethod;\n  }\n}\n\nexport function invokeWebpackConfig(env, argv) {\n  // Check if the project has a webpack.config.js in the root.\n  const projectWebpackConfig = path.resolve(env.projectRoot, 'webpack.config.js');\n  if (fs.existsSync(projectWebpackConfig)) {\n    const webpackConfig = require(projectWebpackConfig);\n    return invokePossibleFunction(webpackConfig, env, argv);\n  }\n  // Fallback to the default expo webpack config.\n  const config = require('@expo/webpack-config');\n  return config(env, argv);\n}\n\nexport async function openProjectAsync(projectRoot) {\n  await Doctor.validateWebSupportAsync(projectRoot);\n\n  try {\n    let url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n    openBrowser(url);\n    return { success: true, url };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on web: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n// If platforms only contains the \"web\" field\nexport async function onlySupportsWebAsync(projectRoot) {\n  const { exp } = await readConfigJsonAsync(projectRoot);\n  if (Array.isArray(exp.platforms) && exp.platforms.length === 1) {\n    return exp.platforms[0] === 'web';\n  }\n  return false;\n}\n"],"sourceRoot":"/xdl@53.7.2/src"}