{"version":3,"sources":["modules/Modules.js"],"names":["getAllForPlatform","getAllNativeForExpoClientOnPlatform","getVersionableModulesForPlatform","getDetachableModules","getPublishableModules","HIGHEST_KNOWN_VERSION","mapForPlatform","platform","moduleConfig","config","sdkVersion","expoSdkUniversalModulesConfigs","filter","doesVersionSatisfy","sdkVersions","map","includeInExpoClient","isNativeModule","versionable","detachable","libName","version","versionRequirement","semver","satisfies"],"mappings":";;;;;;;;QA2BgBA,iB,GAAAA,iB;QAMAC,mC,GAAAA,mC;QASAC,gC,GAAAA,gC;QASAC,oB,GAAAA,oB;QAMAC,qB,GAAAA,qB;;;;AArDhB;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AAeA,MAAMC,wBAAwB,WAA9B;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAgE;AAC9D,SAAOC,6BAAsBA,YAAtBA,EAAuCA,aAAaC,MAAbD,CAAoBD,QAApBC,CAAvCA,CAAP;AACF;;AAEO,SAASR,iBAAT,CAA2BO,QAA3B,EAA+CG,UAA/C,EAAwF;AAC7F,SAAOC,2DACJC,MADID,CACGH,gBAAgBK,mBAAmBH,UAAnBG,EAA+BL,aAAaM,WAA5CD,CADnBF,EAEJI,GAFIJ,CAEAL,eAAeC,QAAfD,CAFAK,CAAP;AAGF;;AAEO,SAASV,mCAAT,CACLM,QADK,EAELG,UAFK,EAGgB;AACrB,SAAOV,kBAAkBO,QAAlBP,EAA4BU,UAA5BV,EAAwCY,MAAxCZ,CACLQ,gBAAgBA,aAAaQ,mBAAbR,IAAoCA,aAAaS,cAD5DjB,CAAP;AAGF;;AAEO,SAASE,gCAAT,CACLK,QADK,EAELG,UAFK,EAGgB;AACrB,SAAOT,oCAAoCM,QAApCN,EAA8CS,UAA9CT,EAA0DW,MAA1DX,CAAiEO,gBAAgB;AACtF,WAAOA,aAAaU,WAApB;AACD,GAFMjB,CAAP;AAGF;;AAEO,SAASE,oBAAT,CAA8BI,QAA9B,EAAkDG,UAAlD,EAA2F;AAChG,SAAOV,kBAAkBO,QAAlBP,EAA4BU,UAA5BV,EAAwCY,MAAxCZ,CACLQ,gBAAgBA,aAAaS,cAAbT,IAA+BA,aAAaW,UADvDnB,CAAP;AAGF;;AAEO,SAASI,qBAAT,CAA+BM,UAA/B,EAAwE;AAC7E,SAAOC,2DAA+BC,MAA/BD,CACLH,gBACE,CAAC,CAACA,aAAaY,OAAf,IAA0BP,mBAAmBH,UAAnBG,EAA+BL,aAAaM,WAA5CD,CAFvBF,CAAP;AAIF;;AAEA,SAASE,kBAAT,CAA4BQ,OAA5B,EAA6CC,kBAA7C,EAAkF;AAChF,MAAID,YAAY,aAAhB,EAA+B;AAC7B,WAAOE,oCAAOC,SAAPD,CAAiBlB,qBAAjBkB,EAAwCD,kBAAxCC,CAAP;AACF;;AAEA,SAAOA,oCAAOC,SAAPD,CAAiBF,OAAjBE,EAA0BD,kBAA1BC,CAAP;AACF","file":"../../modules/Modules.js","sourcesContent":["/**\n * @flow\n */\n\nimport semver from 'semver';\n\nimport { expoSdkUniversalModulesConfigs } from './config';\n\ntype Platform = 'ios' | 'android';\n\ntype ModuleConfig = {\n  podName: string,\n  libName: string,\n  sdkVersions: string,\n  detachable: boolean,\n  isNativeModule: boolean,\n  subdirectory: string,\n  versionable: boolean,\n  includeInExpoClient: boolean,\n};\n\nconst HIGHEST_KNOWN_VERSION = '10000.0.0';\n\nfunction mapForPlatform(platform: Platform): () => ModuleConfig {\n  return moduleConfig => ({ ...moduleConfig, ...moduleConfig.config[platform] });\n}\n\nexport function getAllForPlatform(platform: Platform, sdkVersion: string): Array<ModuleConfig> {\n  return expoSdkUniversalModulesConfigs\n    .filter(moduleConfig => doesVersionSatisfy(sdkVersion, moduleConfig.sdkVersions))\n    .map(mapForPlatform(platform));\n}\n\nexport function getAllNativeForExpoClientOnPlatform(\n  platform: Platform,\n  sdkVersion: string\n): Array<ModuleConfig> {\n  return getAllForPlatform(platform, sdkVersion).filter(\n    moduleConfig => moduleConfig.includeInExpoClient && moduleConfig.isNativeModule\n  );\n}\n\nexport function getVersionableModulesForPlatform(\n  platform: Platform,\n  sdkVersion: string\n): Array<ModuleConfig> {\n  return getAllNativeForExpoClientOnPlatform(platform, sdkVersion).filter(moduleConfig => {\n    return moduleConfig.versionable;\n  });\n}\n\nexport function getDetachableModules(platform: Platform, sdkVersion: string): Array<ModuleConfig> {\n  return getAllForPlatform(platform, sdkVersion).filter(\n    moduleConfig => moduleConfig.isNativeModule && moduleConfig.detachable\n  );\n}\n\nexport function getPublishableModules(sdkVersion: string): Array<ModuleConfig> {\n  return expoSdkUniversalModulesConfigs.filter(\n    moduleConfig =>\n      !!moduleConfig.libName && doesVersionSatisfy(sdkVersion, moduleConfig.sdkVersions)\n  );\n}\n\nfunction doesVersionSatisfy(version: string, versionRequirement: string): boolean {\n  if (version === 'UNVERSIONED') {\n    return semver.satisfies(HIGHEST_KNOWN_VERSION, versionRequirement);\n  }\n\n  return semver.satisfies(version, versionRequirement);\n}\n"],"sourceRoot":"/xdl@53.7.2/src"}