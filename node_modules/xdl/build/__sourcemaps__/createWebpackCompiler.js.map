{"version":3,"sources":["createWebpackCompiler.js"],"names":["printPreviewNotice","createWebpackCompiler","CONSOLE_TAG","log","projectRoot","message","showInDevtools","ProjectUtils","logInfo","console","logWarning","logError","printInstructions","appName","urls","let","chalk","bold","lanUrlForTerminal","localUrlForTerminal","underline","yellow","config","nonInteractive","useYarn","webpack","onFinished","devSocket","warnings","errors","compiler","err","process","exit","hooks","invalid","tap","clearConsole","isFirstCompile","done","async","stats","statsData","toJson","all","messages","formatWebpackMessages","length","isSuccessful","cyan","red","join"],"mappings":"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","file":"../createWebpackCompiler.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport chalk from 'chalk';\nimport clearConsole from 'react-dev-utils/clearConsole';\nimport formatWebpackMessages from 'react-dev-utils/formatWebpackMessages';\n\nimport * as ProjectUtils from './project/ProjectUtils';\n\nconst CONSOLE_TAG = 'expo';\n\nfunction log(projectRoot, message, showInDevtools = true) {\n  if (showInDevtools) {\n    ProjectUtils.logInfo(projectRoot, CONSOLE_TAG, message);\n  } else {\n    console.log(message);\n  }\n}\n\nfunction logWarning(projectRoot, message) {\n  ProjectUtils.logWarning(projectRoot, CONSOLE_TAG, message);\n}\n\nfunction logError(projectRoot, message) {\n  ProjectUtils.logError(projectRoot, CONSOLE_TAG, message);\n}\n\nfunction printInstructions(projectRoot, appName, urls, showInDevtools) {\n  let message = `You can now view ${chalk.bold(appName)} in the browser.\\n\\n`;\n  if (urls.lanUrlForTerminal) {\n    message += `  ${chalk.bold('Local:')}            ${urls.localUrlForTerminal}\\n`;\n    message += `  ${chalk.bold('On Your Network:')}  ${urls.lanUrlForTerminal}\\n`;\n  } else {\n    message += `  ${urls.localUrlForTerminal}\\n`;\n  }\n\n  message += `\\nNote that the development build is not optimized. To create a production build, use ${chalk.bold(\n    `expo build:web`\n  )}.`;\n  log(projectRoot, message, showInDevtools);\n}\n\nexport function printPreviewNotice(projectRoot, showInDevtools) {\n  log(\n    projectRoot,\n    chalk.underline.yellow(\n      '\\nWeb support in Expo is experimental and subject to breaking changes. Do not use this in production yet.'\n    ),\n    showInDevtools\n  );\n}\n\nexport default function createWebpackCompiler({\n  projectRoot,\n  appName,\n  config,\n  urls,\n  nonInteractive,\n  useYarn,\n  webpack,\n  onFinished,\n}) {\n  const devSocket = {\n    warnings: warnings => logWarning(projectRoot, warnings),\n    errors: errors => logError(projectRoot, errors),\n  };\n\n  // \"Compiler\" is a low-level interface to Webpack.\n  // It lets us listen to some events and provide our own custom messages.\n  let compiler;\n  try {\n    compiler = webpack(config);\n  } catch (err) {\n    logError(projectRoot, '\\nFailed to compile\\n' + err.message || err);\n    process.exit(1);\n  }\n\n  // \"invalid\" event fires when you have changed a file, and Webpack is\n  // recompiling a bundle. WebpackDevServer takes care to pause serving the\n  // bundle, so if you refresh, it'll wait instead of serving the old one.\n  // \"invalid\" is short for \"bundle invalidated\", it doesn't imply any errors.\n  compiler.hooks.invalid.tap('invalid', () => {\n    if (!nonInteractive) {\n      clearConsole();\n    }\n    log(projectRoot, '\\nCompiling...');\n  });\n\n  let isFirstCompile = true;\n\n  // \"done\" event fires when Webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n  compiler.hooks.done.tap('done', async stats => {\n    if (!nonInteractive) {\n      clearConsole();\n    }\n\n    // We have switched off the default Webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    // We only construct the warnings and errors for speed:\n    // https://github.com/facebook/create-react-app/issues/4492#issuecomment-421959548\n    const statsData = stats.toJson({\n      all: false,\n      warnings: true,\n      errors: true,\n    });\n\n    const messages = formatWebpackMessages(statsData);\n\n    if (messages.errors.length > 0) {\n      devSocket.errors(messages.errors);\n    } else if (messages.warnings.length > 0) {\n      devSocket.warnings(messages.warnings);\n    }\n\n    const isSuccessful = !messages.errors.length && !messages.warnings.length;\n    if (isSuccessful) {\n      log(projectRoot, chalk.bold.cyan(`Compiled successfully!`));\n      printPreviewNotice(projectRoot, isFirstCompile);\n    }\n    if (isSuccessful && (!nonInteractive || isFirstCompile)) {\n      printInstructions(projectRoot, appName, urls, isFirstCompile);\n    }\n    if (!isFirstCompile) {\n      log(\n        projectRoot,\n        `Press ${chalk.bold('?')} to show a list of all available commands.\\n`,\n        false\n      );\n    }\n    onFinished();\n    isFirstCompile = false;\n\n    // If errors exist, only show errors.\n    if (messages.errors.length) {\n      // Only keep the first error. Others are often indicative\n      // of the same problem, but confuse the reader with noise.\n      if (messages.errors.length > 1) {\n        messages.errors.length = 1;\n      }\n      logError(projectRoot, chalk.red('Failed to compile.\\n') + messages.errors.join('\\n\\n'));\n      return;\n    }\n\n    // Show warnings if no errors were found.\n    if (messages.warnings.length) {\n      logWarning(\n        projectRoot,\n        chalk.yellow('Compiled with warnings.\\n') + messages.warnings.join('\\n\\n')\n      );\n    }\n  });\n\n  return compiler;\n}\n"],"sourceRoot":"/xdl@53.7.2/src"}