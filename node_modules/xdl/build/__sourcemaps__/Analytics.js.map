{"version":3,"sources":["Analytics.js"],"names":["flush","setSegmentNodeKey","setUserProperties","setVersionName","logEvent","let","_segmentNodeInstance","_userId","_version","PLATFORM_TO_ANALYTICS_PLATFORM","darwin","win32","linux","cb","key","flushAfter","userId","traits","identify","context","_getContext","version","name","properties","track","event","platform","os","ip","address","device","model","brand","release","app"],"mappings":";;;;;QAiBgBA,K,GAAAA,K;QAIAC,iB,GAAAA,iB;QAKAC,iB,GAAAA,iB;QAYAC,c,GAAAA,c;QAIAC,Q,GAAAA,Q;;AAtChB;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEAC,IAAIC,oBAAJD;;AACAA,IAAIE,OAAJF;AACAA,IAAIG,QAAJH;AACA,MAAMI,iCAAiC;AACrCC,UAAQ,KAD6B;AAErCC,SAAO,SAF8B;AAGrCC,SAAO;AAH8B,CAAvC;;AAMO,SAASZ,KAAT,CAAea,EAAf,EAAmB;AACxB,MAAIP,oBAAJ,EAA0BA,qBAAqBN,KAArBM,CAA2BO,EAA3BP;AAC5B;;AAEO,SAASL,iBAAT,CAA2Ba,GAA3B,EAAwC;AAC7C;AACAR,yBAAuB,sDAAYQ,GAAZ,EAAiB,EAAEC,YAAY,GAAd,EAAjB,CAAvBT;AACF;;AAEO,SAASJ,iBAAT,CAA2Bc,MAA3B,EAA2CC,MAA3C,EAAwD;AAC7DV,YAAUS,MAAVT;;AAEA,MAAID,oBAAJ,EAA0B;AACxBA,yBAAqBY,QAArBZ,CAA8B;AAC5BU,YAD4B;AAE5BC,YAF4B;AAG5BE,eAASC;AAHmB,KAA9Bd;AAKF;AACF;;AAEO,SAASH,cAAT,CAAwBkB,OAAxB,EAAyC;AAC9Cb,aAAWa,OAAXb;AACF;;AAEO,SAASJ,QAAT,CAAkBkB,IAAlB,EAAgCC,aAAkB,EAAlD,EAAsD;AAC3D,MAAIjB,wBAAwBC,OAA5B,EAAqC;AACnCD,yBAAqBkB,KAArBlB,CAA2B;AACzBU,cAAQT,OADiB;AAEzBkB,aAAOH,IAFkB;AAGzBC,gBAHyB;AAIzBJ,eAASC;AAJgB,KAA3Bd;AAMF;AACF;;AAEA,SAASc,WAAT,GAAuB;AACrBf,MAAIqB,WAAWjB,+BAA+BkB,YAAGD,QAAHC,EAA/BlB,CAAfJ;AACAA,MAAIc,UAAU;AACZS,QAAIA,4BAAGC,OAAHD,EADQ;AAEZE,YAAQ;AACNC,aAAOL,QADD;AAENM,aAAON;AAFD,KAFI;AAMZC,QAAI;AACFL,YAAMI,QADJ;AAEFL,eAASM,YAAGM,OAAHN;AAFP,KANQ;AAUZO,SAAK;AAVO,GAAd7B;;AAaA,MAAIG,QAAJ,EAAc;AACZW,YAAQe,GAARf,GAAc;AACZE,eAASb;AADG,KAAdW;AAGF;;AAEA,SAAOA,OAAP;AACF","file":"../Analytics.js","sourcesContent":["/**\n * @flow\n */\n\nimport os from 'os';\nimport Segment from 'analytics-node';\nimport ip from './ip';\n\nlet _segmentNodeInstance;\nlet _userId;\nlet _version;\nconst PLATFORM_TO_ANALYTICS_PLATFORM = {\n  darwin: 'Mac',\n  win32: 'Windows',\n  linux: 'Linux',\n};\n\nexport function flush(cb) {\n  if (_segmentNodeInstance) _segmentNodeInstance.flush(cb);\n}\n\nexport function setSegmentNodeKey(key: string) {\n  // Do not wait before flushing, we want node to close immediately if the programs ends\n  _segmentNodeInstance = new Segment(key, { flushAfter: 300 });\n}\n\nexport function setUserProperties(userId: string, traits: any) {\n  _userId = userId;\n\n  if (_segmentNodeInstance) {\n    _segmentNodeInstance.identify({\n      userId,\n      traits,\n      context: _getContext(),\n    });\n  }\n}\n\nexport function setVersionName(version: string) {\n  _version = version;\n}\n\nexport function logEvent(name: string, properties: any = {}) {\n  if (_segmentNodeInstance && _userId) {\n    _segmentNodeInstance.track({\n      userId: _userId,\n      event: name,\n      properties,\n      context: _getContext(),\n    });\n  }\n}\n\nfunction _getContext() {\n  let platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()];\n  let context = {\n    ip: ip.address(),\n    device: {\n      model: platform,\n      brand: platform,\n    },\n    os: {\n      name: platform,\n      version: os.release(),\n    },\n    app: {},\n  };\n\n  if (_version) {\n    context.app = {\n      version: _version,\n    };\n  }\n\n  return context;\n}\n"],"sourceRoot":"/xdl@53.7.2/src"}