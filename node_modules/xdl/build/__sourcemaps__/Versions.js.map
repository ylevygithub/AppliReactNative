{"version":3,"sources":["Versions.js"],"names":["async","api","versionCache","getAsync","path","join","__dirname","await","versionsAsync","sdkVersions","sdkVersionsAsync","turtleSdkVersions","turtleSdkVersionsAsync","value","user","UserManager","getCurrentUserAsync","ApiV2Client","clientForUser","postAsync","secret","process","env","EXPO_VERSIONS_SECRET","setVersionsAsync","let","result","highestMajorVersion","_","forEach","key","semver","major","version","newestSdkVersionAsync","supportedVersions","pickBy","v","isDeprecated","versionNumbers","push","Math","min","oldestSupportedMajorVersionAsync","facebookReactNativeVersions","Set","facebookReactNativeVersion","add","Array","from","facebookReactNativeVersionsAsync","valid","ErrorCode","INVALID_VERSION","currentSdkVersion","minor","gt","facebookReactNativeVersionToExpoVersionAsync","sdkVersion","platform","expoSdkVersion","undefined","turtleSdkVersion","gte","canTurtleBuildSdkVersion","gteSdkVersion","lteSdkVersion","parseSdkVersionFromTag","expJson","e","lte","tag","startsWith","substring"],"mappings":"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","file":"../Versions.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport path from 'path';\nimport semver from 'semver';\n\nimport ApiV2Client from './ApiV2';\nimport { Cacher } from './tools/FsCache';\nimport ErrorCode from './ErrorCode';\nimport XDLError from './XDLError';\nimport UserManager from './User';\n\nexport async function versionsAsync() {\n  const api = new ApiV2Client();\n  const versionCache = new Cacher(\n    () => api.getAsync('versions/latest'),\n    'versions.json',\n    0,\n    path.join(__dirname, '../caches/versions.json')\n  );\n  return await versionCache.getAsync();\n}\n\nexport async function sdkVersionsAsync() {\n  const { sdkVersions } = await versionsAsync();\n  return sdkVersions;\n}\n\nexport async function turtleSdkVersionsAsync() {\n  const { turtleSdkVersions } = await versionsAsync();\n  return turtleSdkVersions;\n}\n\nexport async function setVersionsAsync(value: any) {\n  const user = await UserManager.getCurrentUserAsync();\n  const api = ApiV2Client.clientForUser(user);\n  return await api.postAsync('versions/update', {\n    value,\n    secret: process.env.EXPO_VERSIONS_SECRET,\n  });\n}\n\nexport function gteSdkVersion(expJson: any, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(\n      ErrorCode.INVALID_VERSION,\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function lteSdkVersion(expJson: any, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(\n      ErrorCode.INVALID_VERSION,\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function parseSdkVersionFromTag(tag: string) {\n  if (tag.startsWith('sdk-')) {\n    return tag.substring(4);\n  }\n\n  return tag;\n}\n\nexport async function newestSdkVersionAsync() {\n  let sdkVersions = await sdkVersionsAsync();\n  let result = {};\n  let highestMajorVersion = '0.0.0';\n  _.forEach(sdkVersions, (value, key) => {\n    if (semver.major(key) > semver.major(highestMajorVersion)) {\n      highestMajorVersion = key;\n      result = value;\n    }\n  });\n  result.version = highestMajorVersion;\n  return result;\n}\n\nexport async function oldestSupportedMajorVersionAsync() {\n  const sdkVersions = await sdkVersionsAsync();\n  const supportedVersions = _.pickBy(sdkVersions, v => !v.isDeprecated);\n  let versionNumbers = [];\n  _.forEach(supportedVersions, (value, key) => {\n    versionNumbers.push(semver.major(key));\n  });\n  return Math.min(...versionNumbers);\n}\n\nexport async function facebookReactNativeVersionsAsync(): Promise<Array<string>> {\n  let sdkVersions = await sdkVersionsAsync();\n  let facebookReactNativeVersions = new Set();\n\n  _.forEach(sdkVersions, value => {\n    if (value.facebookReactNativeVersion) {\n      facebookReactNativeVersions.add(value.facebookReactNativeVersion);\n    }\n  });\n\n  return Array.from(facebookReactNativeVersions);\n}\n\nexport async function facebookReactNativeVersionToExpoVersionAsync(\n  facebookReactNativeVersion: string\n): Promise<?string> {\n  if (!semver.valid(facebookReactNativeVersion)) {\n    throw new XDLError(\n      ErrorCode.INVALID_VERSION,\n      `${facebookReactNativeVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n\n  let sdkVersions = await sdkVersionsAsync();\n  let currentSdkVersion = null;\n\n  _.forEach(sdkVersions, (value, key) => {\n    if (\n      semver.major(value.facebookReactNativeVersion) === semver.major(facebookReactNativeVersion) &&\n      semver.minor(value.facebookReactNativeVersion) === semver.minor(facebookReactNativeVersion) &&\n      (!currentSdkVersion || semver.gt(key, currentSdkVersion))\n    ) {\n      currentSdkVersion = key;\n    }\n  });\n\n  return currentSdkVersion;\n}\n\nexport async function canTurtleBuildSdkVersion(sdkVersion, platform) {\n  if (sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  if (semver.valid(sdkVersion) == null) {\n    throw new XDLError(\n      ErrorCode.INVALID_VERSION,\n      `\"${sdkVersion}\" is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n\n  const turtleSdkVersions = await turtleSdkVersionsAsync();\n  const expoSdkVersion = (await sdkVersionsAsync())[sdkVersion];\n\n  if (expoSdkVersion === undefined) {\n    throw new XDLError(\n      ErrorCode.INVALID_VERSION,\n      `\"${sdkVersion}\" is not a valid Expo SDK version.`\n    );\n  } else if (expoSdkVersion.isDeprecated) {\n    throw new XDLError(\n      ErrorCode.INVALID_VERSION,\n      `\"${sdkVersion}\" is deprecated. Please update Expo SDK version.`\n    );\n  }\n  if (!turtleSdkVersions || !turtleSdkVersions[platform]) {\n    return true;\n  }\n\n  const turtleSdkVersion = turtleSdkVersions[platform];\n  return semver.gte(turtleSdkVersion, sdkVersion);\n}\n"],"sourceRoot":"/xdl@53.7.2/src"}