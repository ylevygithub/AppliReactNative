{"version":3,"sources":["Project.js"],"names":["async","projectDir","packagerPort","expoServerPort","await","ProjectSettings","readPackagerInfoAsync","currentStatus","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","getManifestUrlWithFallbackAsync","ErrorCode","NO_PROJECT_ROOT","_assertValidProjectRoot","rangeStart","let","port","freeportAsync","NO_PORT_FOUND","_getFreePortAsync","platform","errorCode","minLength","getPlatformSpecificBundleUrl","fullUrl","response","axios","get","responseType","transformResponse","data","proxy","validateStatus","status","headers","error","body","JSON","parse","e","ProjectUtils","logError","message","length","_getForPlatformAsync","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","_resolveGoogleServicesFile","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","fieldPath","urls","Promise","all","map","pathOrURL","match","existsSync","err","Error","localAssetPath","manifestField","forEach","index","set","logMethod","logWarning","_resolveManifestAssets","options","exp","pkg","readConfigJsonAsync","configName","ConfigUtils","configFilenameAsync","NO_PACKAGE_JSON","slug","name","INVALID_MANIFEST","getSlugAsync","formData","append","releaseChannel","queryResult","Api","callMethodAsync","getLatestReleaseAsync","sourceDirs","outputDir","assetPathToWrite","ensureDir","bundlesPathToWrite","androidIndexes","iosIndexes","sourceDir","promises","sourceAssetDir","outputAssetDir","assetPromise","copy","push","sourceBundleDir","outputBundleDir","bundlePromise","putJsonInMemory","indexPath","accumulator","JsonFile","readAsync","Array","isArray","androidIndexPath","iosIndexPath","getSortedIndex","indexes","sort","index1","index2","semver","eq","logger","global","gte","sortedAndroidIndexes","sortedIosIndexes","_writeArtifactSafelyAsync","join","stringify","mergeAppDistributions","publicUrl","assetUrl","_validatePackagerReadyAsync","packagerOpts","dev","isDev","minify","iosBundle","androidBundle","_buildPublishBundlesAsync","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","info","publishOptions","_getPublishExpConfigAsync","assets","_fetchAndSaveAssetsAsync","dumpAssetmap","assetmap","asset","hash","hooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","hashIds","uuid","v1","revisionId","encode","now","developer","tool","username","UserManager","getCurrentUsernameAsync","id","bundleUrl","urljoin","dumpSourcemap","iosSourceMap","androidSourceMap","_maybeBuildSourceMapsAsync","force","iosMapName","iosMapPath","androidMapName","androidMapPath","truncateLastNLines","appendFile","debugHtml","exportForAppHosting","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","paths","files","fileHashes","keyChunks","chunk","Object","keys","key","logDebug","quiet","assetPath","p","_saveAssetAsync","user","getCurrentUserAsync","buildReuseStatus","ApiV2","clientForUser","postAsync","findReusableBuildAsync","ensureLoggedInAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","PUBLISH_VALIDATION_ERROR","validPostPublishHooks","postPublish","hook","file","fn","_requireFromProject","_fn","HOOK_INITIALIZATION_ERROR","_fetchAndUploadAssetsAsync","_uploadArtifactsAsync","serverError","Sentry","captureException","_maybeWriteArtifactsToDiskAsync","ios","publishManifestPath","androidManifest","iosManifest","ExponentTools","getManifestAsync","Accept","hookOptions","log","msg","result","config","then","warn","stack","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","publishBundlePath","fullManifestUrl","replace","constantsPath","deleteLinesInFileAsync","regexFileAsync","isKernel","_handleKernelPublishedAsync","publishAsync","packagerInfo","startReactNativeServerAsync","reset","schema","joi","object","string","validate","INVALID_OPTIONS","toString","version","process","env","locales","getResolvedLocalesAsync","opts","entryPoint","Exp","determineEntryPointAsync","publishUrl","constructPublishUrlAsync","INVALID_BUNDLE","MINIMUM_BUNDLE_SIZE","sourceMapUrl","constructSourceMapUrlAsync","hostedAssetPrefix","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","INVALID_ASSETS","androidAssetsJson","manifestAssets","absolutePath","md5hex","iosAssets","androidAssets","concat","_collectAssets","assetBundlePatterns","fullPatterns","bundledAssets","Set","shouldBundle","__packager_asset","some","minimatch","add","type","_configureExpForAssets","assetCdnPath","EXPO_CDN","uploadAssetsAsync","hostedUrl","keyName","artifactPath","artifact","pathToWrite","dirname","errorMsg","writeFile","publishSourceMapPath","kernelBundleUrl","api","scheme","host","kernel","androidManifestPath","iosManifestPath","metas","metadata","missing","exists","relativePath","createReadStream","configPrefix","ThirdParty","getManifest","getConfigAsync","current","boolean","mode","any","valid","expIds","array","regex","bundleIdentifier","package","buildAsync","retries","test","delayAsync","_waitForRunningAsync","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","customLogReporterPath","resolveModule","assetExts","nonPersistent","Versions","gteSdkVersion","assetPlugins","maxWorkers","userPackagerOpts","uniq","undefined","cliOpts","reduce","val","defaultCliPath","cliPath","rnCliPath","nodePath","_nodePathForProjectRoot","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","NODE_PATH","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","treekill","stdout","setEncoding","stderr","pipe","split","_logPackagerOutput","exitPromise","reject","once","code","packagerUrl","constructBundleUrlAsync","urlType","hostType","race","treekillAsync","stopExpoServerAsync","app","express","use","json","limit","urlencoded","extended","manifestHandler","req","res","getPackagerOptsAsync","bundleUrlPackagerOpts","xde","shouldExposeEnvironmentVariableInManifest","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","hostname","encodeURI","encodeURIComponent","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","hostUUID","UserSettings","anonymousIdentifier","currentSession","getSessionAsync","offline","manifestString","_cachedSignedManifest","signedManifest","unsignedManifest","signature","publishInfo","getPublishInfoAsync","args","hostInfo","server","serverVersion","require","serverDriver","serverOS","os","serverOSVersion","release","send","post","deviceId","deviceName","_handleDeviceLogs","close","expRc","readExpRcAsync","manifestPort","listen","address","saveRecentExpRootAsync","startExpoServerAsync","hostnameAsync","ngrokPid","attempts","configPath","dotExpoHomeDirectory","ngrokConnectAsync","NGROK_ERROR","error_code","kill","ngrokKillAsync","resetProjectRandomnessAsync","_connectToNgrokAsync","NO_PACKAGER_PORT","NO_EXPO_SERVER_PORT","stopTunnelsAsync","Android","startAdbReverseAsync","logInfo","packageShortName","base","startedTunnelsSuccessfully","TUNNEL_TIMEOUT","expoServerNgrokUrl","authtoken","ngrok","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","logWithLevel","tag","_expoEventType","addListener","startTunnelsAsync","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","number","integer","setOptionsAsync","getUrlAsync","chalk","green","readAssetJsonAsync","getAssetFilesAsync","optimizeImageAsync","calculateHash","createNewFilename","toReadableValue","assetJson","assetInfo","outdated","fileHash","totalSaved","allFiles","selectedFiles","hashes","image","delete","outdatedHash","quality","strQuality","include","exclude","save","Number","validQuality","isInteger","outputQuality","images","prevSize","statSync","newName","newSize","amountSaved","renameSync","gray","newHash","unlinkSync","writeAsync","optimizeAsync","webOnly","Webpack","startAsync","DevSession","startSession","stopSession","hasWebSupport","hasWebSupportAsync","stopAsync","_stopInternalAsync","setTimeout","webpackServerPort","promisify","connect","modulePath","fullPath","decache","level","output","_isIgnorableDuplicateModuleWarning","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","escapeRegExp","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","_isAppRegistryStartupMessage","logs","i","DEBUG","obj","groupDepth","shouldHide","includesStack","directory","parentDirectory","delimiter","blacklistedEnvironmentVariables","has","toUpperCase"],"mappings":"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","file":"../Project.js","sourcesContent":["/**\n * @flow\n */\nimport axios from 'axios';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport crypto from 'crypto';\nimport delayAsync from 'delay-async';\nimport decache from 'decache';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport joi from 'joi';\nimport JsonFile from '@expo/json-file';\nimport promisify from 'util.promisify';\nimport chunk from 'lodash/chunk';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport get from 'lodash/get';\nimport reduce from 'lodash/reduce';\nimport set from 'lodash/set';\nimport uniq from 'lodash/uniq';\nimport minimatch from 'minimatch';\nimport ngrok from '@expo/ngrok';\nimport os from 'os';\nimport path from 'path';\nimport semver from 'semver';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport md5hex from 'md5hex';\nimport urljoin from 'url-join';\nimport uuid from 'uuid';\nimport readLastLines from 'read-last-lines';\n\nimport * as ConfigUtils from '@expo/config';\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport ApiV2 from './ApiV2';\nimport * as AssetUtils from './AssetUtils';\nimport Config from './Config';\nimport * as Doctor from './project/Doctor';\nimport * as DevSession from './DevSession';\nimport ErrorCode from './ErrorCode';\nimport logger from './Logger';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as Exp from './Exp';\nimport * as ExpSchema from './project/ExpSchema';\nimport FormData from './tools/FormData';\nimport * as IosPlist from './detach/IosPlist';\nimport * as IosWorkspace from './detach/IosWorkspace';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Sentry from './Sentry';\nimport StandaloneContext from './detach/StandaloneContext';\nimport * as ThirdParty from './ThirdParty';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME } from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport XDLError from './XDLError';\nimport type { User as ExpUser } from './User'; //eslint-disable-line\nimport * as Webpack from './Webpack';\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nconst treekillAsync = promisify(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\ntype CachedSignedManifest = {\n  manifestString: ?string,\n  signedManifest: ?string,\n};\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(projectRoot: string) {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot) {\n  if (!projectRoot) {\n    throw new XDLError(ErrorCode.NO_PROJECT_ROOT, 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart) {\n  let port = await freeportAsync(rangeStart);\n  if (!port) {\n    throw new XDLError(ErrorCode.NO_PORT_FOUND, 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(projectRoot, url, platform, { errorCode, minLength }) {\n  url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);\n\n  let fullUrl = `${url}&platform=${platform}`;\n  let response;\n\n  try {\n    response = await axios.get(fullUrl, {\n      responseType: 'text',\n      // Workaround for https://github.com/axios/axios/issues/907.\n      // Without transformResponse, axios will parse the body as JSON regardless of the responseType/\n      transformResponse: [data => data],\n      proxy: false,\n      validateStatus: status => status === 200,\n      headers: {\n        'Exponent-Platform': platform,\n      },\n    });\n  } catch (error) {\n    if (error.response) {\n      if (error.response.data) {\n        let body;\n        try {\n          body = JSON.parse(error.response.data);\n        } catch (e) {\n          ProjectUtils.logError(projectRoot, 'expo', response.data);\n        }\n\n        if (body) {\n          if (body.message) {\n            ProjectUtils.logError(projectRoot, 'expo', body.message);\n          } else {\n            ProjectUtils.logError(projectRoot, 'expo', response.data);\n          }\n        }\n      }\n      throw new XDLError(\n        errorCode,\n        `Packager URL ${fullUrl} returned unexpected code ${response.status}. ` +\n          'Please open your project in the Expo app and see if there are any errors. ' +\n          'Also scroll up and make sure there were no errors or warnings when opening your project.'\n      );\n    } else {\n      throw error;\n    }\n  }\n\n  if (!response.data || (minLength && response.data.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.data}`);\n  }\n\n  return response.data;\n}\n\nasync function _resolveGoogleServicesFile(projectRoot, manifest) {\n  if (manifest.android && manifest.android.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n}\n\nasync function _resolveManifestAssets(projectRoot, manifest, resolver, strict = false) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (await ExpSchema.getAssetSchemasAsync(manifest.sdkVersion)).filter(\n      ({ fieldPath }) => get(manifest, fieldPath)\n    );\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async ({ fieldPath }) => {\n        const pathOrURL = get(manifest, fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err = new Error('Could not resolve local asset.');\n          // $FlowFixMe\n          err.localAssetPath = pathOrURL;\n          // $FlowFixMe\n          err.manifestField = fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach(({ fieldPath }, index) => set(manifest, fieldPath + 'Url', urls[index]));\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${\n          e.manifestField\n        }\" in your app/exp.json.`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath, projectRoot, exp) {\n  try {\n    let fullPath = ConfigUtils.resolveModule(modulePath, projectRoot, exp);\n    // Clear the require cache for this module so get a fresh version of it\n    // without requiring the user to restart Expo CLI\n    decache(fullPath);\n    // $FlowIssue: doesn't work with dynamic requires\n    return require(fullPath);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getSlugAsync(projectRoot: string, options: Object = {}) {\n  // Verify that exp/app.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  } else if (!exp.slug) {\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      `${configName} in ${projectRoot} must contain the slug field`\n    );\n  }\n  return exp.slug;\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string,\n    platform: string,\n  }\n) {\n  // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n  let formData = new FormData();\n  formData.append('queryType', 'history');\n  formData.append('slug', await getSlugAsync(projectRoot));\n  formData.append('version', '2');\n  formData.append('count', '1');\n  formData.append('releaseChannel', options.releaseChannel);\n  formData.append('platform', options.platform);\n  const { queryResult } = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n    formData,\n  });\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\n// Takes multiple exported apps in sourceDirs and coalesces them to one app in outputDir\nexport async function mergeAppDistributions(\n  projectRoot: string,\n  sourceDirs: Array<string>,\n  outputDir: string\n) {\n  const assetPathToWrite = path.resolve(projectRoot, outputDir, 'assets');\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, outputDir, 'bundles');\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // merge files from bundles and assets\n  const androidIndexes = [];\n  const iosIndexes = [];\n\n  for (let sourceDir of sourceDirs) {\n    const promises = [];\n\n    // copy over assets/bundles from other src dirs to the output dir\n    if (sourceDir !== outputDir) {\n      // copy file over to assetPath\n      const sourceAssetDir = path.resolve(projectRoot, sourceDir, 'assets');\n      const outputAssetDir = path.resolve(projectRoot, outputDir, 'assets');\n      const assetPromise = fs.copy(sourceAssetDir, outputAssetDir);\n      promises.push(assetPromise);\n\n      // copy files over to bundlePath\n      const sourceBundleDir = path.resolve(projectRoot, sourceDir, 'bundles');\n      const outputBundleDir = path.resolve(projectRoot, outputDir, 'bundles');\n      const bundlePromise = fs.copy(sourceBundleDir, outputBundleDir);\n      promises.push(bundlePromise);\n\n      await Promise.all(promises);\n    }\n\n    // put index.jsons into memory\n    const putJsonInMemory = async (indexPath, accumulator) => {\n      const index = await JsonFile.readAsync(indexPath);\n      if (!index.sdkVersion) {\n        throw new XDLError(\n          ErrorCode.INVALID_MANIFEST,\n          `Invalid index.json, must specify an sdkVersion at ${indexPath}`\n        );\n      }\n      if (Array.isArray(index)) {\n        // index.json could also be an array\n        accumulator.push(...index);\n      } else {\n        accumulator.push(index);\n      }\n    };\n\n    const androidIndexPath = path.resolve(projectRoot, sourceDir, 'android-index.json');\n    await putJsonInMemory(androidIndexPath, androidIndexes);\n\n    const iosIndexPath = path.resolve(projectRoot, sourceDir, 'ios-index.json');\n    await putJsonInMemory(iosIndexPath, iosIndexes);\n  }\n\n  // sort indexes by descending sdk value\n  const getSortedIndex = indexes => {\n    return indexes.sort((index1, index2) => {\n      if (semver.eq(index1.sdkVersion, index2.sdkVersion)) {\n        logger.global.error(\n          `Encountered multiple index.json with the same SDK version ${\n            index1.sdkVersion\n          }. This could result in undefined behavior.`\n        );\n      }\n      return semver.gte(index1.sdkVersion, index2.sdkVersion) ? -1 : 1;\n    });\n  };\n\n  const sortedAndroidIndexes = getSortedIndex(androidIndexes);\n  const sortedIosIndexes = getSortedIndex(iosIndexes);\n\n  // Save the json arrays to disk\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(sortedAndroidIndexes)\n  );\n\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(sortedIosIndexes)\n  );\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {} = {}\n) {\n  await _validatePackagerReadyAsync(projectRoot);\n\n  // build the bundles\n  let packagerOpts = {\n    dev: !!options.isDev,\n    minify: true,\n  };\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  const { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot, packagerOpts);\n  const iosBundleHash = crypto\n    .createHash('md5')\n    .update(iosBundle)\n    .digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(outputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto\n    .createHash('md5')\n    .update(androidBundle)\n    .digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(outputDir, 'bundles', androidBundleUrl);\n\n  await _writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await _writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const { exp } = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await _fetchAndSaveAssetsAsync(projectRoot, exp, publicUrl, outputDir);\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n    const assetmap = {};\n    assets.forEach(asset => {\n      assetmap[asset.hash] = asset;\n    });\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  delete exp.hooks;\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuid.v1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      'Must provide a slug field in the app.json manifest.'\n    );\n  }\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  exp.id = `@${username}/${exp.slug}`;\n\n  // save the android manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', androidBundleUrl);\n  exp.platform = 'android';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // save the ios manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', iosBundleUrl);\n  exp.platform = 'ios';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    const { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n      force: true,\n    });\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(outputDir, 'bundles', iosMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(outputDir, 'bundles', androidMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n    <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle.\n    `;\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n\nasync function _saveAssetAsync(projectRoot, assets, outputDir) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n      logger.global.info({ quiet: true }, `Saving ${paths[key]}`);\n\n      let assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      const p = fs.copy(paths[key], assetPath);\n      promises.push(p);\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\nexport async function findReusableBuildAsync(\n  releaseChannel: string,\n  platform: string,\n  sdkVersion: string,\n  slug: string\n): Promise<{ downloadUrl?: string, canReuse: boolean }> {\n  const user = await UserManager.getCurrentUserAsync();\n\n  const buildReuseStatus = await ApiV2.clientForUser(user).postAsync('standalone-build/reuse', {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    slug,\n  });\n\n  return buildReuseStatus;\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: Object = {}\n): Promise<{ url: string, ids: string[], err: ?string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus === Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      ErrorCode.PUBLISH_VALIDATION_ERROR,\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks = [];\n  if (hooks && hooks.postPublish) {\n    hooks.postPublish.forEach(hook => {\n      let { file } = hook;\n      let fn = _requireFromProject(file, projectRoot, exp);\n      if (typeof fn !== 'function') {\n        logger.global.error(\n          `Unable to load postPublishHook: '${file}'. The module does not export a function.`\n        );\n      } else {\n        hook._fn = fn;\n        validPostPublishHooks.push(hook);\n      }\n    });\n\n    if (validPostPublishHooks.length !== hooks.postPublish.length) {\n      logger.global.error();\n\n      throw new XDLError(\n        ErrorCode.HOOK_INITIALIZATION_ERROR,\n        'Please fix your postPublish hook configuration.'\n      );\n    }\n  }\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force: validPostPublishHooks.length,\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      pkg,\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app/exp.json.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  await _maybeWriteArtifactsToDiskAsync({\n    exp,\n    projectRoot,\n    iosBundle,\n    androidBundle,\n    iosSourceMap,\n    androidSourceMap,\n  });\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath)\n  ) {\n    let [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: msg => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        let result = hook._fn({\n          config: hook.config,\n          ...hookOptions,\n        });\n\n        // If it's a promise, wait for it to resolve\n        if (result && result.then) {\n          result = await result;\n        }\n\n        if (result) {\n          logger.global.info({ quiet: true }, result);\n        }\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    if (exp.ios && exp.ios.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'ios.publishManifestPath',\n        exp.ios.publishManifestPath,\n        JSON.stringify(iosManifest)\n      );\n      const context = StandaloneContext.createUserContext(projectRoot, exp);\n      const { supportingDirectory } = IosWorkspace.getPaths(context);\n      await IosPlist.modifyAsync(supportingDirectory, 'EXShell', shellPlist => {\n        shellPlist.releaseChannel = options.releaseChannel;\n        return shellPlist;\n      });\n    }\n\n    if (exp.android && exp.android.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'android.publishManifestPath',\n        exp.android.publishManifestPath,\n        JSON.stringify(androidManifest)\n      );\n    }\n\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    if (exp.android && exp.android.publishManifestPath && exp.android.publishBundlePath) {\n      let fullManifestUrl = response.url.replace('exp://', 'https://');\n      let constantsPath = path.join(\n        projectRoot,\n        'android',\n        'app',\n        'src',\n        'main',\n        'java',\n        'host',\n        'exp',\n        'exponent',\n        'generated',\n        'AppConstants.java'\n      );\n      await ExponentTools.deleteLinesInFileAsync(\n        `START EMBEDDED RESPONSES`,\n        `END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        '// ADD EMBEDDED RESPONSES HERE',\n        `\n        // ADD EMBEDDED RESPONSES HERE\n        // START EMBEDDED RESPONSES\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${fullManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${\n          androidManifest.bundleUrl\n        }\", \"assets://shell-app.bundle\", \"application/javascript\"));\n        // END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${options.releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({ exp, iosBundle, androidBundle, options, pkg }) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('packageJson', JSON.stringify(pkg));\n  formData.append('iosBundle', iosBundle, 'iosBundle');\n  formData.append('androidBundle', androidBundle, 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n  let response = await Api.callMethodAsync('publish', null, 'put', null, {\n    formData,\n  });\n  return response;\n}\n\nasync function _validatePackagerReadyAsync(projectRoot) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      'Metro Bundler is not running. Trying to restart it...'\n    );\n    await startReactNativeServerAsync(projectRoot, { reset: true });\n  }\n}\n\nasync function _getPublishExpConfigAsync(projectRoot, options) {\n  let schema = joi.object().keys({\n    releaseChannel: joi.string(),\n  });\n\n  // Validate schema\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, error.toString());\n  }\n  options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n\n  // Verify that exp/app.json and package.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (exp.sdkVersion === 'UNVERSIONED' && !process.env['EXPO_SKIP_MANIFEST_VALIDATION_TOKEN']) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(exp);\n  return { exp, pkg };\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot, opts?: Object) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let publishUrl = await UrlUtils.constructPublishUrlAsync(projectRoot, entryPoint, null, opts);\n\n  logger.global.info('Building iOS bundle');\n  let iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  let androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _maybeBuildSourceMapsAsync(projectRoot, exp, options = {}) {\n  if (!options.force) {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function _collectAssets(projectRoot, exp, hostedAssetPrefix) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async assetPath => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    true\n  );\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  return iosAssets.concat(androidAssets).concat(manifestAssets);\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot, exp, assets) {\n  // Add google services file if it exists\n  await _resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns = exp.assetBundlePatterns.map(p => path.join(projectRoot, p));\n    logger.global.info('Processing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        asset.__packager_asset && file && fullPatterns.some(p => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add('asset_' + hash + (asset.type ? '.' + asset.type : ''))\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot, exp) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(EXPO_CDN, '~assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Uploading assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return exp;\n}\n\nasync function _fetchAndSaveAssetsAsync(projectRoot, exp, hostedUrl, outputDir) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, 'assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await _saveAssetAsync(projectRoot, assets, outputDir);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\nasync function _writeArtifactSafelyAsync(projectRoot, keyName, artifactPath, artifact) {\n  const pathToWrite = path.resolve(projectRoot, artifactPath);\n  if (!fs.existsSync(path.dirname(pathToWrite))) {\n    const errorMsg = keyName\n      ? `app.json specifies: ${pathToWrite}, but that directory does not exist.`\n      : `app.json specifies ${keyName}: ${pathToWrite}, but that directory does not exist.`;\n    logger.global.warn(errorMsg);\n  } else {\n    await fs.writeFile(pathToWrite, artifact);\n  }\n}\n\nasync function _maybeWriteArtifactsToDiskAsync({\n  exp,\n  projectRoot,\n  iosBundle,\n  androidBundle,\n  iosSourceMap,\n  androidSourceMap,\n}) {\n  if (exp.android && exp.android.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      exp.android.publishBundlePath,\n      androidBundle\n    );\n  }\n\n  if (exp.ios && exp.ios.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishBundlePath',\n      exp.ios.publishBundlePath,\n      iosBundle\n    );\n  }\n\n  if (exp.android && exp.android.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      exp.android.publishSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (exp.ios && exp.ios.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      exp.ios.publishSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _handleKernelPublishedAsync({ projectRoot, user, exp, url }) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot, assets) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const metas = (await Api.callMethodAsync('assetsMetadata', [], 'post', {\n    keys: Object.keys(paths),\n  })).metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, fs.createReadStream(paths[key]), paths[key]);\n      }\n      await Api.callMethodAsync('uploadAssets', [], 'put', null, { formData });\n    })\n  );\n}\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n  } = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: await ConfigUtils.configFilenameAsync(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\nexport async function buildAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n    sdkVersion?: string,\n  } = {}\n) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-.]+$/),\n    publicUrl: joi.string(),\n    sdkVersion: joi.strict(),\n  });\n\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, error.toString());\n  }\n\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (options.mode !== 'status' && (options.platform === 'ios' || options.platform === 'all')) {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a bundle identifier in order to build this experience for iOS. ` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.mode !== 'status' && (options.platform === 'android' || options.platform === 'all')) {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a java package in order to build this experience for Android. ` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n\n  return await Api.callMethodAsync('build', [], 'put', {\n    manifest: exp,\n    options,\n  });\n}\n\nasync function _waitForRunningAsync(projectRoot, url, retries = 300) {\n  try {\n    let response = await axios.get(url, {\n      responseType: 'text',\n      proxy: false,\n    });\n    if (/packager-status:running/.test(response.data)) {\n      return true;\n    } else if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. Server response: ${response.data}`\n      );\n    }\n  } catch (e) {\n    if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. ${e.message}`\n      );\n    }\n  }\n\n  if (retries <= 0) {\n    throw new Error('Connecting to Metro bundler failed.');\n  } else {\n    await delayAsync(100);\n    return _waitForRunningAsync(projectRoot, url, retries - 1);\n  }\n}\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: Object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _isAppRegistryStartupMessage(body) {\n  return body.length === 1 && /^Running application \"main\" with appParams:/.test(body[0]);\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    let log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let { level } = log;\n\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = logger.DEBUG;\n    }\n    if (_isAppRegistryStartupMessage(body)) {\n      body = [`Running application on ${deviceName}.`];\n    }\n\n    let string = body\n      .map(obj => {\n        if (typeof obj === 'undefined') {\n          return 'undefined';\n        }\n        if (obj === 'null') {\n          return 'null';\n        }\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n          return obj;\n        }\n        try {\n          return JSON.stringify(obj);\n        } catch (e) {\n          return obj.toString();\n        }\n      })\n      .join(' ');\n\n    ProjectUtils.logWithLevel(\n      projectRoot,\n      level,\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      string\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n) {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n\n  let packagerOpts = {\n    port: packagerPort,\n    customLogReporterPath: ConfigUtils.resolveModule('expo/tools/LogReporter', projectRoot, exp),\n    assetExts: ['ttf'],\n    nonPersistent: !!options.nonPersistent,\n  };\n\n  if (Versions.gteSdkVersion(exp, '33.0.0')) {\n    packagerOpts.assetPlugins = ConfigUtils.resolveModule(\n      'expo/tools/hashAssetFiles',\n      projectRoot,\n      exp\n    );\n  }\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      ...(userPackagerOpts.assetExts\n        ? {\n            assetExts: uniq([...packagerOpts.assetExts, ...userPackagerOpts.assetExts]),\n          }\n        : {}),\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  let cliOpts = reduce(\n    packagerOpts,\n    (opts, val, key) => {\n      // If the packager opt value is boolean, don't set\n      // --[opt] [value], just set '--opt'\n      if (val && typeof val === 'boolean') {\n        opts.push(`--${key}`);\n      } else if (val) {\n        opts.push(`--${key}`, val);\n      }\n      return opts;\n    },\n    ['start']\n  );\n\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = ConfigUtils.resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n  const cliPath = exp.rnCliPath || defaultCliPath;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      NODE_PATH: nodePath,\n      ELECTRON_RUN_AS_NODE: 1,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  let exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      if (code) {\n        reject(new Error(`Metro Bundler process exited with code ${code}`));\n      } else {\n        resolve();\n      }\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await Promise.race([_waitForRunningAsync(projectRoot, `${packagerUrl}/status`), exitPromise]);\n}\n\n// Simulate the node_modules resolution\n// If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns\n// \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nlet blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n  'EXPO_CLI_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nexport async function startExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  } // Serve the manifest.\n  let manifestHandler = async (req, res) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      let { exp: manifest } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n      if (!manifest) {\n        const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n        throw new Error(`No ${configName} file found`);\n      } // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (shouldExposeEnvironmentVariableInManifest(key)) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n      let platform = req.headers['exponent-platform'] || 'ios';\n      entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(\n        projectRoot,\n        packagerOpts,\n        req.hostname\n      );\n      let path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n        platform\n      )}&${queryParams}`;\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, req.hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, req.hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, req.hostname);\n      manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, req.hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      await _resolveGoogleServicesFile(projectRoot, manifest);\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      let currentSession = await UserManager.getSessionAsync();\n      if (!currentSession || Config.offline) {\n        manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      if (req.headers['exponent-accept-signature']) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (!currentSession || Config.offline) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n            let signedManifest = await Api.callMethodAsync(\n              'signManifest',\n              [publishInfo.args],\n              'post',\n              manifest\n            );\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('../package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.append('Exponent-Server', JSON.stringify(hostInfo));\n      res.send(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n      });\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error in manifestHandler: ${e} ${e.stack}`);\n      // 5xx = Server Error HTTP code\n      res.status(520).send({\n        error: e.toString(),\n      });\n    }\n  };\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    let host = server.address().address;\n    let port = server.address().port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\n\nexport async function stopExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await axios.post(`http://127.0.0.1:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\n\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: mixed,\n  hostnameAsync: Function,\n  ngrokPid: ?number,\n  attempts: number = 0\n) {\n  try {\n    let configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    let hostname = await hostnameAsync();\n    let url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError(ErrorCode.NGROK_ERROR, e.toString());\n      } else {\n        throw new XDLError(ErrorCode.NGROK_ERROR, JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string) {\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGER_PORT,\n      `No packager found for project at ${projectRoot}.`\n    );\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      ErrorCode.NO_EXPO_SERVER_PORT,\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await ConfigUtils.readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      let expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      let packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', status => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number,\n  }\n) {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, error.toString());\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\nexport async function getUrlAsync(projectRoot: string, options: Object = {}) {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function optimizeAsync(projectRoot: string = './', options: Object = {}) {\n  logger.global.info(chalk.green('Optimizing assets...'));\n  const {\n    readAssetJsonAsync,\n    getAssetFilesAsync,\n    optimizeImageAsync,\n    calculateHash,\n    createNewFilename,\n    toReadableValue,\n  } = AssetUtils;\n\n  const { assetJson, assetInfo } = await readAssetJsonAsync(projectRoot);\n  // Keep track of which hash values in assets.json are no longer in use\n  const outdated = new Set();\n  for (const fileHash in assetInfo) outdated.add(fileHash);\n\n  let totalSaved = 0;\n  const { allFiles, selectedFiles } = await getAssetFilesAsync(projectRoot, options);\n  const hashes = {};\n  // Remove assets that have been deleted/modified from assets.json\n  allFiles.forEach(image => {\n    const hash = calculateHash(image);\n    if (assetInfo[hash]) {\n      outdated.delete(hash);\n    }\n    hashes[image] = hash;\n  });\n  outdated.forEach(outdatedHash => {\n    delete assetInfo[outdatedHash];\n  });\n\n  // Check for custom quality value\n  const { quality: strQuality, include, exclude, save } = options;\n  const quality = Number(strQuality);\n  const validQuality = Number.isInteger(quality) && quality > 0 && quality <= 100;\n  if (strQuality !== undefined && !validQuality) {\n    logger.global.warn('Invalid quality entered. Using default of 60.');\n  }\n  const outputQuality = validQuality ? quality : 60;\n\n  const images = include || exclude ? selectedFiles : allFiles;\n  for (const image of images) {\n    const hash = hashes[image];\n    if (assetInfo[hash]) {\n      continue;\n    }\n    const { size: prevSize } = fs.statSync(image);\n\n    const newName = createNewFilename(image);\n    await optimizeImageAsync(image, newName, outputQuality);\n\n    const { size: newSize } = fs.statSync(image);\n    const amountSaved = prevSize - newSize;\n    if (amountSaved < 0) {\n      // Delete the optimized version and revert changes\n      fs.renameSync(newName, image);\n      assetInfo[hash] = true;\n      logger.global.info(\n        chalk.gray(\n          `Compressed version of ${image} was larger than original. Using original instead.`\n        )\n      );\n      continue;\n    }\n    // Recalculate hash since the image has changed\n    const newHash = calculateHash(image);\n    assetInfo[newHash] = true;\n\n    if (save) {\n      if (hash === newHash) {\n        logger.global.info(\n          chalk.gray(\n            `Compressed asset ${image} is identical to the original. Using original instead.`\n          )\n        );\n        fs.unlinkSync(newName);\n      } else {\n        logger.global.info(chalk.gray(`Saving original asset to ${newName}`));\n        // Save the old hash to prevent reoptimizing\n        assetInfo[hash] = true;\n      }\n    } else {\n      // Delete the renamed original asset\n      fs.unlinkSync(newName);\n    }\n    totalSaved += amountSaved;\n    logger.global.info(`Saved ${toReadableValue(amountSaved)}`);\n  }\n  if (totalSaved === 0) {\n    logger.global.info('No assets optimized. Everything is fully compressed!');\n  } else {\n    logger.global.info(\n      `Finished compressing assets. ${chalk.green(toReadableValue(totalSaved))} saved.`\n    );\n  }\n  assetJson.writeAsync(assetInfo);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n): Promise<any> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n  if (options.webOnly) {\n    await Webpack.startAsync(projectRoot, options, verbose);\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync(projectRoot, options, verbose);\n  }\n\n  if (!Config.offline) {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  DevSession.startSession(projectRoot, exp);\n  return exp;\n}\n\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await stopExpoServerAsync(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  const hasWebSupport = await Doctor.hasWebSupportAsync(projectRoot);\n  if (hasWebSupport) {\n    await Webpack.stopAsync(projectRoot);\n  }\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\n\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise((resolve, reject) => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n      webpackServerPort: null,\n    });\n  }\n}\n"],"sourceRoot":"/xdl@53.7.2/src"}