{"version":3,"sources":["AssetUtils.js"],"names":["toReadableValue","bytes","sizes","index","Math","floor","log","reduced","pow","toFixed","calculateHash","file","contents","fs","readFileSync","crypto","createHash","update","digest","optimizeImageAsync","async","image","newName","quality","logger","global","info","copyFileSync","buffer","await","sharp","toBuffer","format","metadata","jpeg","toFile","catch","err","error","png","hasUnoptimizedAssetsAsync","projectDir","options","existsSync","path","join","selectedFiles","getAssetFilesAsync","assetInfo","readAssetJsonAsync","hash","exp","readConfigJsonAsync","assetBundlePatterns","globOptions","cwd","ignore","allFiles","forEach","pattern","push","glob","sync","included","include","toExclude","Set","exclude","add","excluded","filter","has","filtered","filterImages","files","regex","withDirectory","map","replace","allImages","test","toLowerCase","dirPath","mkdirSync","assetJson","message","chalk","italic","writeAsync","readAsync","createNewFilename","dir","name","ext","parse"],"mappings":"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","file":"../AssetUtils.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport crypto from 'crypto';\nimport chalk from 'chalk';\nimport sharp from 'sharp';\nimport glob from 'glob';\nimport JsonFile from '@expo/json-file';\nimport logger from './Logger';\nimport { readConfigJsonAsync } from './project/ProjectUtils';\n\n/*\n * Converts a raw number of bytes into a human readable value\n */\nexport const toReadableValue = bytes => {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const index = Math.floor(Math.log(bytes) / Math.log(1024));\n  const reduced = (bytes / Math.pow(1024, index)).toFixed(2) * 1;\n\n  return `${reduced} ${sizes[index]}`;\n};\n\n/*\n * Calculate SHA256 Checksum value of a file based on its contents\n */\nexport const calculateHash = file => {\n  const contents = fs.readFileSync(file);\n  return crypto\n    .createHash('sha256')\n    .update(contents)\n    .digest('hex');\n};\n\n/*\n * Compress an inputted jpg or png\n */\nexport const optimizeImageAsync = async (image, newName, quality) => {\n  logger.global.info(`Optimizing ${image}`);\n  fs.copyFileSync(image, newName);\n\n  // Extract the format and compress\n  const buffer = await sharp(image).toBuffer();\n  const { format } = await sharp(buffer).metadata();\n  if (format === 'jpeg') {\n    await sharp(newName)\n      .jpeg({ quality })\n      .toFile(image)\n      .catch(err => logger.global.error(err));\n  } else {\n    await sharp(newName)\n      .png({ quality })\n      .toFile(image)\n      .catch(err => logger.global.error(err));\n  }\n};\n\n/*\n * Returns a boolean indicating whether or not there are assets to optimize\n */\nexport const hasUnoptimizedAssetsAsync = async (projectDir, options) => {\n  if (!fs.existsSync(path.join(projectDir, '.expo-shared/assets.json'))) {\n    return true;\n  }\n  const { selectedFiles } = await getAssetFilesAsync(projectDir, options);\n  const { assetInfo } = await readAssetJsonAsync(projectDir);\n\n  for (const file of selectedFiles) {\n    const hash = calculateHash(file);\n    if (!assetInfo[hash]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/*\n * Find all project assets under assetBundlePatterns in app.json excluding node_modules.\n * If --include of --exclude flags were passed in those results are filtered out.\n */\nexport const getAssetFilesAsync = async (projectDir, options) => {\n  const { exp } = await readConfigJsonAsync(projectDir);\n  const { assetBundlePatterns } = exp;\n  const globOptions = {\n    cwd: projectDir,\n    ignore: ['**/node_modules/**', '**/ios/**', '**/android/**'],\n  };\n\n  // All files must be returned even if flags are passed in to properly update assets.json\n  const allFiles = [];\n  assetBundlePatterns.forEach(pattern => {\n    allFiles.push(...glob.sync(pattern, globOptions));\n  });\n  // If --include is passed in, only return files matching that pattern\n  const included = options.include ? [...glob.sync(options.include, globOptions)] : allFiles;\n  const toExclude = new Set();\n  if (options.exclude) {\n    glob.sync(options.exclude, globOptions).forEach(file => toExclude.add(file));\n  }\n  // If --exclude is passed in, filter out files matching that pattern\n  const excluded = included.filter(file => !toExclude.has(file));\n  const filtered = options.exclude ? excluded : included;\n  return {\n    allFiles: filterImages(allFiles, projectDir),\n    selectedFiles: filterImages(filtered, projectDir),\n  };\n};\n\n/*\n * Formats an array of files to include the project directory and filters out PNGs and JPGs.\n */\nconst filterImages = (files, projectDir) => {\n  const regex = /\\.(png|jpg|jpeg)$/;\n  const withDirectory = files.map(file => `${projectDir}/${file}`.replace('//', '/'));\n  const allImages = withDirectory.filter(file => regex.test(file.toLowerCase()));\n  return allImages;\n};\n\n/*\n * Read the contents of assets.json under .expo-shared folder. Create the file/directory if they don't exist.\n */\nexport const readAssetJsonAsync = async projectDir => {\n  const dirPath = path.join(projectDir, '.expo-shared');\n  if (!fs.existsSync(dirPath)) {\n    fs.mkdirSync(dirPath);\n  }\n\n  const assetJson = new JsonFile(path.join(dirPath, 'assets.json'));\n  if (!fs.existsSync(assetJson.file)) {\n    const message =\n      `Creating ${chalk.italic('.expo-shared/assets.json')} in the project's root directory.\\n` +\n      `This file is autogenerated and should not be edited directly.\\n` +\n      'You should commit this to git so that asset state is shared between collaborators.';\n\n    logger.global.info(message);\n\n    await assetJson.writeAsync({});\n  }\n  const assetInfo = await assetJson.readAsync();\n  return { assetJson, assetInfo };\n};\n\n/*\n * Add .orig extension to a filename in a path string\n */\nexport const createNewFilename = image => {\n  const { dir, name, ext } = path.parse(image);\n  return dir + '/' + name + '.orig' + ext;\n};\n"],"sourceRoot":"/xdl@53.7.2/src"}