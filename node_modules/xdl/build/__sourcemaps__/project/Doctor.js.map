{"version":3,"sources":["project/Doctor.js"],"names":["async","projectRoot","await","Binaries","sourceBashLoginScriptsAsync","let","yarnVersionResponse","spawnAsync","status","NO_ISSUES","e","npmVersionResponse","npmVersion","_","trim","stdout","semver","lt","MIN_NPM_VERSION","_isNpmVersionWithinRanges","BAD_NPM_VERSION_RANGES","ProjectUtils","logError","CORRECT_NPM_VERSION","WARNING","WARN_NPM_VERSION_RANGES","logWarning","clearNotification","_checkNpmVersionAsync","Watchman","isPlatformSupported","watchmanVersion","unblockAndGetVersionAsync","MIN_WATCHMAN_VERSION","warningMessage","process","platform","_checkWatchmanVersionAsync","schemaPath","exp","readConfigJsonAsync","schema","JSON","parse","fs","readFile","validateWithSchema","validateWithSchemaFileAsync","configName","sdkVersion","validateAssets","schemaErrorMessage","assetsErrorMessage","validator","rootDir","validateSchemaAsync","errors","length","map","formatValidationError","join","validateAssetsAsync","Config","helpUrl","pkg","allowNetwork","FATAL","message","expJsonExists","ConfigUtils","fileExistsAsync","path","appJsonExists","configFilenameAsync","env","EXPO_SKIP_MANIFEST_VALIDATION_TOKEN","ExpSchema","getSchemaAsync","ERROR","sdkVersions","Versions","sdkVersionsAsync","keys","reactNativeIssue","_validateReactNativeVersionAsync","_validateExpJsonAsync","validation","reactNativeVersionWarnings","reactNative","dependencies","isDetached","test","reactNativeTag","match","sdkVersionObject","major","parseSdkVersionFromTag","nodeModulesPath","resolve","result","statSync","isDirectory","resolveModule","code","_validateNodeModulesAsync","validateAsync","validateLowLatencyAsync","validateWithNetworkAsync","inputExp","platforms","Array","isArray","isWebConfigured","includes","hasWebSupportAsync","isInteractive","isTTY","validateWebPlatformAddedAsync","validateWebSupportAsync","hasWebSupport","promptToAddWebPlatform","addPlatform","ErrorCode","WEB_NOT_CONFIGURED","getWebSetupLogs","question","type","name","default","should","inquirer","prompt","promptAsync","chalk","green","underline","getenv","boolish","expStatus","Math","max","ignoreNodeModulesValidation","nodeModulesStatus","sdkPkg","EXPO_SDK_NOT_INSTALLED","mainFilePath","main","mainFile","EXPO_SDK_INSTALLED_AND_IMPORTED","EXPO_SDK_NOT_IMPORTED","getExpoSdkStatus","ranges","some","range","satisfies","validationError","fieldPath","appJsonRules","bold","red"],"mappings":"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","file":"../../project/Doctor.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport semver from 'semver';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\nimport * as ConfigUtils from '@expo/config';\n\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport Schemer, { SchemerError } from '@expo/schemer';\n\nimport * as ExpSchema from './ExpSchema';\nimport * as ProjectUtils from './ProjectUtils';\nimport * as Binaries from '../Binaries';\nimport Config from '../Config';\nimport * as Versions from '../Versions';\nimport * as Watchman from '../Watchman';\nimport XDLError from '../XDLError';\nimport ErrorCode from '../ErrorCode';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const ERROR = 2;\nexport const FATAL = 3;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\nconst MIN_NPM_VERSION = '3.0.0';\nconst CORRECT_NPM_VERSION = 'latest';\nconst WARN_NPM_VERSION_RANGES = ['>= 5.0.0 < 5.7.0'];\nconst BAD_NPM_VERSION_RANGES = ['>= 5.0.0 <= 5.0.3'];\n\nfunction _isNpmVersionWithinRanges(npmVersion, ranges) {\n  return _.some(ranges, range => semver.satisfies(npmVersion, range));\n}\n\nasync function _checkNpmVersionAsync(projectRoot) {\n  try {\n    await Binaries.sourceBashLoginScriptsAsync();\n\n    try {\n      let yarnVersionResponse = await spawnAsync('yarnpkg', ['--version']);\n      if (yarnVersionResponse.status === 0) {\n        return NO_ISSUES;\n      }\n    } catch (e) {}\n\n    let npmVersionResponse = await spawnAsync('npm', ['--version']);\n    let npmVersion = _.trim(npmVersionResponse.stdout);\n\n    if (\n      semver.lt(npmVersion, MIN_NPM_VERSION) ||\n      _isNpmVersionWithinRanges(npmVersion, BAD_NPM_VERSION_RANGES)\n    ) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: You are using npm version ${npmVersion}. We recommend the latest version ${CORRECT_NPM_VERSION}. To install it, run 'npm i -g npm@${CORRECT_NPM_VERSION}'.`,\n        'doctor-npm-version'\n      );\n      return WARNING;\n    } else if (_isNpmVersionWithinRanges(npmVersion, WARN_NPM_VERSION_RANGES)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: You are using npm version ${npmVersion}. There may be bugs in this version, use it at your own risk. We recommend version ${CORRECT_NPM_VERSION}.`,\n        'doctor-npm-version'\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-npm-version');\n    }\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Could not determine npm version. Make sure your version is >= ${MIN_NPM_VERSION} - we recommend ${CORRECT_NPM_VERSION}.`,\n      'doctor-npm-version'\n    );\n    return WARNING;\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _checkWatchmanVersionAsync(projectRoot) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  let watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(projectRoot, 'expo', warningMessage, 'doctor-watchman-version');\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nexport async function validateWithSchemaFileAsync(\n  projectRoot: string,\n  schemaPath: string\n): Promise<{ schemaErrorMessage: ?string, assetsErrorMessage: ?string }> {\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let schema = JSON.parse(await fs.readFile(schemaPath, 'utf8'));\n  return validateWithSchema(projectRoot, exp, schema.schema, 'exp.json', 'UNVERSIONED', true);\n}\n\nexport async function validateWithSchema(\n  projectRoot: string,\n  exp: any,\n  schema: any,\n  configName: string,\n  sdkVersion: string,\n  validateAssets: boolean\n): Promise<{ schemaErrorMessage: ?string, assetsErrorMessage: ?string }> {\n  let schemaErrorMessage;\n  let assetsErrorMessage;\n  let validator = new Schemer(schema, { rootDir: projectRoot });\n\n  // Validate the schema itself\n  try {\n    await validator.validateSchemaAsync(exp);\n  } catch (e) {\n    if (e instanceof SchemerError) {\n      schemaErrorMessage = `Error: Problem${\n        e.errors.length > 1 ? 's' : ''\n      } validating fields in ${configName}. See https://docs.expo.io/versions/v${sdkVersion}/workflow/configuration/`;\n      schemaErrorMessage += e.errors.map(formatValidationError).join('');\n    }\n  }\n\n  if (validateAssets) {\n    try {\n      await validator.validateAssetsAsync(exp);\n    } catch (e) {\n      if (e instanceof SchemerError) {\n        assetsErrorMessage = `Error: Problem${\n          e.errors.length > 1 ? '' : 's'\n        } validating asset fields in ${configName}. See ${Config.helpUrl}`;\n        assetsErrorMessage += e.errors.map(formatValidationError).join('');\n      }\n    }\n  }\n  return { schemaErrorMessage, assetsErrorMessage };\n}\n\nfunction formatValidationError(validationError) {\n  return `\\n • ${validationError.fieldPath ? 'Field: ' + validationError.fieldPath + ' - ' : ''}${\n    validationError.message\n  }.`;\n}\n\nasync function _validateExpJsonAsync(exp, pkg, projectRoot, allowNetwork): Promise<number> {\n  if (!exp || !pkg) {\n    // readConfigJsonAsync already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem checking watchman version. ${e.message}.`,\n      'doctor-problem-checking-watchman-version'\n    );\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-problem-checking-watchman-version');\n\n  const expJsonExists = await ConfigUtils.fileExistsAsync(path.join(projectRoot, 'exp.json'));\n  const appJsonExists = await ConfigUtils.fileExistsAsync(path.join(projectRoot, 'app.json'));\n\n  if (expJsonExists && appJsonExists) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Both app.json and exp.json exist in this directory. Only one should exist for a single project.`,\n      'doctor-both-app-and-exp-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-both-app-and-exp-json');\n\n  let sdkVersion = exp.sdkVersion;\n  const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n\n  // Skip validation if the correct token is set in env\n  if (!(sdkVersion === 'UNVERSIONED' && process.env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN)) {\n    try {\n      let schema = await ExpSchema.getSchemaAsync(sdkVersion);\n      let { schemaErrorMessage, assetsErrorMessage } = await validateWithSchema(\n        projectRoot,\n        exp,\n        schema,\n        configName,\n        sdkVersion,\n        allowNetwork\n      );\n\n      if (schemaErrorMessage) {\n        ProjectUtils.logError(projectRoot, 'expo', schemaErrorMessage, 'doctor-schema-validation');\n      } else {\n        ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n      }\n      if (assetsErrorMessage) {\n        ProjectUtils.logError(\n          projectRoot,\n          'expo',\n          assetsErrorMessage,\n          `doctor-validate-asset-fields`\n        );\n      } else {\n        ProjectUtils.clearNotification(projectRoot, `doctor-validate-asset-fields`);\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation-exception');\n      if (schemaErrorMessage || assetsErrorMessage) return ERROR;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Problem validating ${configName}: ${e.message}.`,\n        'doctor-schema-validation-exception'\n      );\n    }\n  }\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED' && !process.env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`,\n      'doctor-unversioned'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n\n  let sdkVersions = await Versions.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Couldn't connect to SDK versions server`,\n      'doctor-versions-endpoint-failed'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-versions-endpoint-failed');\n\n  if (!sdkVersions[sdkVersion]) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Invalid sdkVersion. Valid options are ${_.keys(sdkVersions).join(', ')}`,\n      'doctor-invalid-sdk-version'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  const reactNativeIssue = await _validateReactNativeVersionAsync(\n    exp,\n    pkg,\n    projectRoot,\n    sdkVersions,\n    sdkVersion\n  );\n\n  if (reactNativeIssue !== NO_ISSUES) {\n    return reactNativeIssue;\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\nasync function _validateReactNativeVersionAsync(\n  exp,\n  pkg,\n  projectRoot,\n  sdkVersions,\n  sdkVersion\n): Promise<number> {\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies ? pkg.dependencies['react-native'] : null;\n\n    // react-native is required\n    if (!reactNative) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: Can't find react-native in package.json dependencies`,\n        'doctor-no-react-native-in-package-json'\n      );\n      return ERROR;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-no-react-native-in-package-json');\n\n    if (!exp.isDetached) {\n      return NO_ISSUES;\n\n      // (TODO-2017-07-20): Validate the react-native version if it uses\n      // officially published package rather than Expo fork. Expo fork of\n      // react-native was required before CRNA. We now only run the react-native\n      // validation of the version if we are using the fork. We should probably\n      // validate the version here as well such that it matches with the\n      // react-native version compatible with the selected SDK.\n    }\n\n    // Expo fork of react-native is required\n    if (!/expo\\/react-native/.test(reactNative)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n        'doctor-not-using-expo-fork'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(Versions.parseSdkVersionFromTag(sdkVersionObject['expoReactNativeTag']))\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:expo/react-native#${\n            sdkVersionObject['expoReactNativeTag']\n          }`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-version-of-react-native');\n\n      ProjectUtils.clearNotification(projectRoot, 'doctor-malformed-version-of-react-native');\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _validateNodeModulesAsync(projectRoot): Promise<number> {\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let nodeModulesPath = projectRoot;\n  if (exp.nodeModulesPath) {\n    nodeModulesPath = path.resolve(projectRoot, exp.nodeModulesPath);\n  }\n\n  // Check to make sure node_modules exists at all\n  try {\n    let result = fs.statSync(path.join(nodeModulesPath, 'node_modules'));\n    if (!result.isDirectory()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n        'doctor-node-modules-missing'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-missing');\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n      'doctor-node-modules-missing'\n    );\n    return FATAL;\n  }\n\n  // Check to make sure react native is installed\n  try {\n    ConfigUtils.resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n    ProjectUtils.clearNotification(projectRoot, 'doctor-react-native-not-installed');\n  } catch (e) {\n    if (e.code === 'MODULE_NOT_FOUND') {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: React Native is not installed. Please run \\`npm install\\` in your project directory.`,\n        'doctor-react-native-not-installed'\n      );\n      return FATAL;\n    } else {\n      throw e;\n    }\n  }\n  return NO_ISSUES;\n}\n\nexport async function validateLowLatencyAsync(projectRoot: string): Promise<number> {\n  return validateAsync(projectRoot, false);\n}\n\nexport async function validateWithNetworkAsync(projectRoot: string): Promise<number> {\n  return validateAsync(projectRoot, true);\n}\n\nexport async function hasWebSupportAsync(projectRoot, exp) {\n  let inputExp = exp;\n  if (!exp) {\n    inputExp = (await ProjectUtils.readConfigJsonAsync(projectRoot)).exp;\n  }\n  const { platforms } = inputExp;\n  if (!Array.isArray(platforms)) {\n    return false;\n  }\n\n  const isWebConfigured = platforms.includes('web');\n  return isWebConfigured;\n}\n\nfunction getWebSetupLogs(): string {\n  const appJsonRules = chalk.green(`\n  {\n    \"platforms\": [\n  ${chalk.green.bold(`+      \"web\"`)}\n    ]\n  }`);\n  return `${chalk.red(\n    `* Add \"web\" to the \"platforms\" array in your project's ${chalk.bold(`app.json`)}`\n  )} ${appJsonRules}`;\n}\n\nexport async function validateWebSupportAsync(projectRoot) {\n  const isInteractive = process.stdout.isTTY;\n\n  await validateWebPlatformAddedAsync(projectRoot, isInteractive);\n\n  // TODO: Bacon: Add package validation\n}\n\nexport async function validateWebPlatformAddedAsync(\n  projectRoot: string,\n  isInteractive: boolean = true\n): Promise<void> {\n  const hasWebSupport = await hasWebSupportAsync(projectRoot);\n  if (hasWebSupport) {\n    return true;\n  }\n\n  if (isInteractive && (await promptToAddWebPlatform())) {\n    await ConfigUtils.addPlatform(projectRoot, 'web');\n    return true;\n  }\n  throw new XDLError(ErrorCode.WEB_NOT_CONFIGURED, getWebSetupLogs());\n}\n\nasync function promptAsync(message: string): Promise<boolean> {\n  const question = {\n    type: 'confirm',\n    name: 'should',\n    message,\n    default: true,\n  };\n  const { should } = await inquirer.prompt(question);\n  return should;\n}\n\nasync function promptToAddWebPlatform(): Promise<boolean> {\n  return await promptAsync(\n    `It appears you don't explicitly define \"${chalk.green.underline(\n      `web`\n    )}\" as one of the supported \"${chalk.green.underline(\n      `platforms`\n    )}\" in your project's ${chalk.green(`app.json`)}. \\n  Would you like to add it?`\n  );\n}\n\nasync function validateAsync(projectRoot: string, allowNetwork: boolean): Promise<number> {\n  if (getenv.boolish('EXPO_NO_DOCTOR', false)) {\n    return NO_ISSUES;\n  }\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let status = await _checkNpmVersionAsync(projectRoot);\n  if (status === FATAL) {\n    return status;\n  }\n\n  const expStatus = await _validateExpJsonAsync(exp, pkg, projectRoot, allowNetwork);\n  if (expStatus === FATAL) {\n    return expStatus;\n  }\n\n  status = Math.max(status, expStatus);\n\n  if (exp && !exp.ignoreNodeModulesValidation) {\n    let nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n    if (nodeModulesStatus > status) {\n      return nodeModulesStatus;\n    }\n  }\n\n  return status;\n}\n\ntype ExpoSdkStatus = 0 | 1 | 2;\n\nexport const EXPO_SDK_INSTALLED_AND_IMPORTED = 0;\nexport const EXPO_SDK_NOT_INSTALLED = 1;\nexport const EXPO_SDK_NOT_IMPORTED = 2;\n\nexport async function getExpoSdkStatus(projectRoot: string): Promise<ExpoSdkStatus> {\n  let { pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  try {\n    let sdkPkg;\n    if (pkg.dependencies['exponent']) {\n      sdkPkg = 'exponent';\n    } else if (pkg.dependencies['expo']) {\n      sdkPkg = 'expo';\n    } else {\n      return EXPO_SDK_NOT_INSTALLED;\n    }\n\n    let mainFilePath = path.join(projectRoot, pkg.main);\n    let mainFile = await fs.readFile(mainFilePath, 'utf8');\n\n    // TODO: support separate .ios.js and .android.js files\n    if (mainFile.includes(`from '${sdkPkg}'`) || mainFile.includes(`require('${sdkPkg}')`)) {\n      return EXPO_SDK_INSTALLED_AND_IMPORTED;\n    } else {\n      return EXPO_SDK_NOT_IMPORTED;\n    }\n  } catch (e) {\n    return EXPO_SDK_NOT_IMPORTED;\n  }\n}\n"],"sourceRoot":"/xdl@53.7.2/src"}