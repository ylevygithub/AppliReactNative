{"version":3,"sources":["project/ProjectUtils.js"],"names":["async","projectRoot","await","ConfigUtils","readExpRcAsync","e","logError","message","readConfigJsonAsync","error","exp","pkg","logWithLevel","logDebug","logInfo","logWarning","clearNotification","attachLoggerStream","MAX_MESSAGE_LENGTH","let","_projectRootToLogger","_getLogger","logger","Logger","child","type","project","path","resolve","level","object","msg","id","issueId","debug","info","warn","tag","toString","truncatedMessage","length","substring","Analytics","logEvent","issueCleared","stream","addStream"],"mappings":"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","file":"../../project/ProjectUtils.js","sourcesContent":["/**\n * @flow\n */\nimport * as ConfigUtils from '@expo/config';\nimport path from 'path';\n\nimport * as Analytics from '../Analytics';\nimport Logger from '../Logger';\n\nconst MAX_MESSAGE_LENGTH = 200;\nlet _projectRootToLogger = {};\n\nfunction _getLogger(projectRoot: string) {\n  let logger = _projectRootToLogger[projectRoot];\n  if (!logger) {\n    logger = Logger.child({\n      type: 'project',\n      project: path.resolve(projectRoot),\n    });\n    _projectRootToLogger[projectRoot] = logger;\n  }\n\n  return logger;\n}\n\nexport function logWithLevel(\n  projectRoot: string,\n  level: string,\n  object: any,\n  msg: string,\n  id: ?string\n) {\n  if (id) {\n    object.issueId = id;\n  }\n\n  let logger = _getLogger(projectRoot);\n  switch (level) {\n    case 'debug':\n      logger.debug(object, msg);\n      break;\n    case 'info':\n      logger.info(object, msg);\n      break;\n    case 'warn':\n      logger.warn(object, msg);\n      break;\n    case 'error':\n      logger.error(object, msg);\n      break;\n    default:\n      logger.debug(object, msg);\n      break;\n  }\n}\n\nexport function logDebug(projectRoot: string, tag: string, message: string, id: ?string) {\n  _getLogger(projectRoot).debug({ tag }, message.toString());\n}\n\nexport function logInfo(projectRoot: string, tag: string, message: string, id: ?string) {\n  const object = { tag };\n  if (id) {\n    object.issueId = id;\n  }\n  _getLogger(projectRoot).info(object, message.toString());\n}\n\nexport function logError(projectRoot: string, tag: string, message: string, id: ?string) {\n  const object = { tag };\n  if (id) {\n    object.issueId = id;\n  }\n  _getLogger(projectRoot).error(object, message.toString());\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n\n  // temporarily remove sentry until we can trim events\n  // send error to Sentry\n  // Sentry.logError(message.toString(), {\n  //   tags: { tag },\n  // });\n}\n\nexport function logWarning(projectRoot: string, tag: string, message: string, id: ?string) {\n  const object = { tag };\n  if (id) {\n    object.issueId = id;\n  }\n  _getLogger(projectRoot).warn(object, message.toString());\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n  Analytics.logEvent('Project Warning', {\n    projectRoot,\n    tag,\n    message: truncatedMessage,\n  });\n}\n\nexport function clearNotification(projectRoot: string, id: string) {\n  _getLogger(projectRoot).info(\n    {\n      tag: 'expo',\n      issueCleared: true,\n      issueId: id,\n    },\n    `No issue with ${id}`\n  );\n}\n\nexport function attachLoggerStream(projectRoot: string, stream: any) {\n  _getLogger(projectRoot).addStream(stream);\n}\n\n// Wrap with logger\n\nexport async function readExpRcAsync(projectRoot: string): Promise<any> {\n  try {\n    return await ConfigUtils.readExpRcAsync(projectRoot);\n  } catch (e) {\n    logError(projectRoot, 'expo', e.message);\n    return {};\n  }\n}\n\nexport async function readConfigJsonAsync(\n  projectRoot: string\n): Promise<{ exp?: Object, pkg?: Object, rootConfig?: Object }> {\n  try {\n    return await ConfigUtils.readConfigJsonAsync(projectRoot);\n  } catch (error) {\n    logError(projectRoot, 'expo', error.message);\n    return { exp: null, pkg: null };\n  }\n}\n"],"sourceRoot":"/xdl@53.7.2/src"}