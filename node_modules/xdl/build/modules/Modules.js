'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getAllForPlatform = getAllForPlatform;
exports.getAllNativeForExpoClientOnPlatform = getAllNativeForExpoClientOnPlatform;
exports.getVersionableModulesForPlatform = getVersionableModulesForPlatform;
exports.getDetachableModules = getDetachableModules;
exports.getPublishableModules = getPublishableModules;

var _semver;

function _load_semver() {
  return _semver = _interopRequireDefault(require('semver'));
}

var _config;

function _load_config() {
  return _config = require('./config');
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const HIGHEST_KNOWN_VERSION = '10000.0.0';

function mapForPlatform(platform) {
  return moduleConfig => _extends({}, moduleConfig, moduleConfig.config[platform]);
}

function getAllForPlatform(platform, sdkVersion) {
  return (_config || _load_config()).expoSdkUniversalModulesConfigs.filter(moduleConfig => doesVersionSatisfy(sdkVersion, moduleConfig.sdkVersions)).map(mapForPlatform(platform));
}

function getAllNativeForExpoClientOnPlatform(platform, sdkVersion) {
  return getAllForPlatform(platform, sdkVersion).filter(moduleConfig => moduleConfig.includeInExpoClient && moduleConfig.isNativeModule);
}

function getVersionableModulesForPlatform(platform, sdkVersion) {
  return getAllNativeForExpoClientOnPlatform(platform, sdkVersion).filter(moduleConfig => {
    return moduleConfig.versionable;
  });
}

function getDetachableModules(platform, sdkVersion) {
  return getAllForPlatform(platform, sdkVersion).filter(moduleConfig => moduleConfig.isNativeModule && moduleConfig.detachable);
}

function getPublishableModules(sdkVersion) {
  return (_config || _load_config()).expoSdkUniversalModulesConfigs.filter(moduleConfig => !!moduleConfig.libName && doesVersionSatisfy(sdkVersion, moduleConfig.sdkVersions));
}

function doesVersionSatisfy(version, versionRequirement) {
  if (version === 'UNVERSIONED') {
    return (_semver || _load_semver()).default.satisfies(HIGHEST_KNOWN_VERSION, versionRequirement);
  }

  return (_semver || _load_semver()).default.satisfies(version, versionRequirement);
}
//# sourceMappingURL=../__sourcemaps__/modules/Modules.js.map
