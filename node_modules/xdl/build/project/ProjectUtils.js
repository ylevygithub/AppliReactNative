'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readConfigJsonAsync = exports.readExpRcAsync = undefined;

// Wrap with logger

let readExpRcAsync = exports.readExpRcAsync = (() => {
  var _ref = _asyncToGenerator(function* (projectRoot) {
    try {
      return yield (_config || _load_config()).readExpRcAsync(projectRoot);
    } catch (e) {
      logError(projectRoot, 'expo', e.message);
      return {};
    }
  });

  return function readExpRcAsync(_x) {
    return _ref.apply(this, arguments);
  };
})();

let readConfigJsonAsync = exports.readConfigJsonAsync = (() => {
  var _ref2 = _asyncToGenerator(function* (projectRoot) {
    try {
      return yield (_config || _load_config()).readConfigJsonAsync(projectRoot);
    } catch (error) {
      logError(projectRoot, 'expo', error.message);
      return { exp: null, pkg: null };
    }
  });

  return function readConfigJsonAsync(_x2) {
    return _ref2.apply(this, arguments);
  };
})();

exports.logWithLevel = logWithLevel;
exports.logDebug = logDebug;
exports.logInfo = logInfo;
exports.logError = logError;
exports.logWarning = logWarning;
exports.clearNotification = clearNotification;
exports.attachLoggerStream = attachLoggerStream;

var _config;

function _load_config() {
  return _config = _interopRequireWildcard(require('@expo/config'));
}

var _path = _interopRequireDefault(require('path'));

var _Analytics;

function _load_Analytics() {
  return _Analytics = _interopRequireWildcard(require('../Analytics'));
}

var _Logger;

function _load_Logger() {
  return _Logger = _interopRequireDefault(require('../Logger'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const MAX_MESSAGE_LENGTH = 200;
let _projectRootToLogger = {};

function _getLogger(projectRoot) {
  let logger = _projectRootToLogger[projectRoot];
  if (!logger) {
    logger = (_Logger || _load_Logger()).default.child({
      type: 'project',
      project: _path.default.resolve(projectRoot)
    });
    _projectRootToLogger[projectRoot] = logger;
  }

  return logger;
}

function logWithLevel(projectRoot, level, object, msg, id) {
  if (id) {
    object.issueId = id;
  }

  let logger = _getLogger(projectRoot);
  switch (level) {
    case 'debug':
      logger.debug(object, msg);
      break;
    case 'info':
      logger.info(object, msg);
      break;
    case 'warn':
      logger.warn(object, msg);
      break;
    case 'error':
      logger.error(object, msg);
      break;
    default:
      logger.debug(object, msg);
      break;
  }
}

function logDebug(projectRoot, tag, message, id) {
  _getLogger(projectRoot).debug({ tag }, message.toString());
}

function logInfo(projectRoot, tag, message, id) {
  const object = { tag };
  if (id) {
    object.issueId = id;
  }
  _getLogger(projectRoot).info(object, message.toString());
}

function logError(projectRoot, tag, message, id) {
  const object = { tag };
  if (id) {
    object.issueId = id;
  }
  _getLogger(projectRoot).error(object, message.toString());

  let truncatedMessage = message.toString();
  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {
    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);
  }

  // temporarily remove sentry until we can trim events
  // send error to Sentry
  // Sentry.logError(message.toString(), {
  //   tags: { tag },
  // });
}

function logWarning(projectRoot, tag, message, id) {
  const object = { tag };
  if (id) {
    object.issueId = id;
  }
  _getLogger(projectRoot).warn(object, message.toString());

  let truncatedMessage = message.toString();
  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {
    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);
  }
  (_Analytics || _load_Analytics()).logEvent('Project Warning', {
    projectRoot,
    tag,
    message: truncatedMessage
  });
}

function clearNotification(projectRoot, id) {
  _getLogger(projectRoot).info({
    tag: 'expo',
    issueCleared: true,
    issueId: id
  }, `No issue with ${id}`);
}

function attachLoggerStream(projectRoot, stream) {
  _getLogger(projectRoot).addStream(stream);
}
//# sourceMappingURL=../__sourcemaps__/project/ProjectUtils.js.map
