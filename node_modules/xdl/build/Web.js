'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onlySupportsWebAsync = exports.openProjectAsync = undefined;

let openProjectAsync = exports.openProjectAsync = (() => {
  var _ref = _asyncToGenerator(function* (projectRoot) {
    yield (_Doctor || _load_Doctor()).validateWebSupportAsync(projectRoot);

    try {
      let url = yield (_UrlUtils || _load_UrlUtils()).constructWebAppUrlAsync(projectRoot);
      (0, (_openBrowser || _load_openBrowser()).default)(url);
      return { success: true, url };
    } catch (e) {
      (_Logger || _load_Logger()).default.global.error(`Couldn't start project on web: ${e.message}`);
      return { success: false, error: e };
    }
  });

  return function openProjectAsync(_x) {
    return _ref.apply(this, arguments);
  };
})();

// If platforms only contains the "web" field


let onlySupportsWebAsync = exports.onlySupportsWebAsync = (() => {
  var _ref2 = _asyncToGenerator(function* (projectRoot) {
    const { exp } = yield (0, (_ProjectUtils || _load_ProjectUtils()).readConfigJsonAsync)(projectRoot);
    if (Array.isArray(exp.platforms) && exp.platforms.length === 1) {
      return exp.platforms[0] === 'web';
    }
    return false;
  });

  return function onlySupportsWebAsync(_x2) {
    return _ref2.apply(this, arguments);
  };
})();

exports.invokeWebpackConfig = invokeWebpackConfig;

var _fs = _interopRequireDefault(require('fs'));

var _openBrowser;

function _load_openBrowser() {
  return _openBrowser = _interopRequireDefault(require('react-dev-utils/openBrowser'));
}

var _path = _interopRequireDefault(require('path'));

var _Logger;

function _load_Logger() {
  return _Logger = _interopRequireDefault(require('./Logger'));
}

var _Doctor;

function _load_Doctor() {
  return _Doctor = _interopRequireWildcard(require('./project/Doctor'));
}

var _ProjectUtils;

function _load_ProjectUtils() {
  return _ProjectUtils = require('./project/ProjectUtils');
}

var _UrlUtils;

function _load_UrlUtils() {
  return _UrlUtils = _interopRequireWildcard(require('./UrlUtils'));
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function invokePossibleFunction(objectOrMethod, ...args) {
  if (typeof objectOrMethod === 'function') {
    return objectOrMethod(...args);
  } else {
    return objectOrMethod;
  }
}

function invokeWebpackConfig(env, argv) {
  // Check if the project has a webpack.config.js in the root.
  const projectWebpackConfig = _path.default.resolve(env.projectRoot, 'webpack.config.js');
  if (_fs.default.existsSync(projectWebpackConfig)) {
    const webpackConfig = require(projectWebpackConfig);
    return invokePossibleFunction(webpackConfig, env, argv);
  }
  // Fallback to the default expo webpack config.
  const config = require('@expo/webpack-config');
  return config(env, argv);
}
//# sourceMappingURL=__sourcemaps__/Web.js.map
